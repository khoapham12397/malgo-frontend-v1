<div id="wiki-content">
<h1 class="pt-4">Persistent Data Structures</h1>
<div class="breadcrumb"><nav aria-label="Breadcrumb"><ol>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/">algo</a></li>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/data-structures/">data-structures</a></li>
</ol></nav></div>
<div class>
<div id="wiki-body" class="gollum-markdown-content overflow-hidden ">
<div class="markdown-body ">
<p><strong>Tác giả:</strong> Nguyễn <em>RR</em> Thành Trung</p>
<p></p><div class="toc"><div class="toc-title">Table of Contents</div><ul><li><a href="#1-mở-đầu">1. Mở đầu</a></li><li><a href="#2-persistent-it">2. Persistent IT</a><ul><li><a href="#tư-tưởng">Tư tưởng</a></li><li><a href="#cài-đặt">Cài đặt:</a></li><li><a href="#phân-tích">Phân tích</a></li></ul></li><li><a href="#3-persistent-bit">3. Persistent BIT</a><ul><li><a href="#tư-tưởng-1">Tư tưởng:</a></li><li><a href="#cài-đặt-1">Cài đặt:</a></li><li><a href="#phân-tích-1">Phân tích:</a></li></ul></li><li><a href="#4-retroactive-data-structures">4. Retroactive Data Structures</a></li><li><a href="#bài-tập-áp-dụng">Bài tập áp dụng</a></li></ul></div>
<h1 class="editable"><a class="anchor" id="1-mở-đầu" href="#1-mở-đầu"></a>1. Mở đầu</h1>
<p><strong>Persistent Data Structures</strong> là những cấu trúc dữ liệu được dùng khi chúng ta cần có <strong>toàn bộ lịch sử</strong> của các thay đổi trên 1 cấu trúc dữ liệu (CTDL). (Chú ý rằng từ <strong>persistent</strong> còn được dùng trong <strong>persistent storage</strong> với một nghĩa hoàn toàn khác).</p>
<p>Xét bài toán ví dụ:</p>
<ul>
<li>Cho một dãy $A$ gồm $N$ phần tử.</li>
<li>Có 2 loại truy vấn:
<ol>
<li>Update: Gán $A_i = v$</li>
<li>Query: Tìm $max(A_i, …, A_j)$ tại thời điểm sau phép gán thứ $K$.</li>
</ol>
</li>
</ul>
<p>Nếu không có đoạn <strong>tại thời điểm sau phép gán thứ K</strong>, bài toán là 1 bài cơ bản trên <strong>Interval Tree</strong>. Đoạn <strong>tại thời điểm sau phép gán thứ K</strong> buộc chúng ta phải lưu lại các thông tin về lịch sử cập nhật CTDL - việc này được giải quyết bằng các Persistent Data Structures.</p>
<p>Gọi trạng thái của CTDL tại một thời điểm là 1 <strong>version</strong> của CTDL đó. Một cách cụ thể hơn, persistent data structures cho phép chúng ta:</p>
<ul>
<li>Truy vấn trên một version cũ của CTDL</li>
<li>Cập nhật dữ liệu trong version mới nhất của CTDL, bằng cách tạo thêm 1 version mới của CTDL.</li>
</ul>
<p>Trong một số cách cài đặt, Persistent Data Structures còn có thể cho phép thay version hiện tại của CTDL thành một version trong quá khứ (phần 2 mô tả phương pháp cài đặt có thể thực hiện được thao tác này).</p>
<p>Cần hiểu rằng Persistent Data Structures không phải là một loại CTDL mới. Nó là một số kĩ năng tổng quát giúp thêm thông tin về lịch sử thay đổi vào CTDL thông thường một cách hiệu quả. Ví dụ:</p>
<ul>
<li>IT + Persistent –&gt; Persistent IT</li>
<li>BIT + Persistent –&gt; Persistent BIT</li>
</ul>
<p>Tại sao lại là <strong>một cách hiệu quả</strong>? Bởi vì ta hoàn toàn có thể có một Persistent Data Structures bằng cách trâu bò: khi cập nhật, ta tạo một bản sao hoàn toàn mới của CTDL, thay đổi một số dữ liệu trên nó và lưu lại. Như vậy ta luôn có được một thuật toán với độ phức tạp $O(Q * N * T)$ và bộ nhớ $O(Q * N)$, với $Q$ là số thao tác cần thực hiện, và $N$ là độ lớn của CTDL, và $T$ là thời gian để thực hiện thao tác trên CTDL.</p>
<p>Trong các phần dưới đây, mình sẽ trình bày về 2 kĩ thuật thông thường của Persistent Data Structures.</p>
<h1 class="editable"><a class="anchor" id="2-persistent-it" href="#2-persistent-it"></a>2. Persistent IT</h1>
<h2 class="editable"><a class="anchor" id="tư-tưởng" href="#tư-tưởng"></a>Tư tưởng</h2>
<p>Quay trở lại bài toán. Chúng ta biết rằng mỗi thao tác update trên IT chỉ mất $O(logN)$. Điều này tương đương với việc mỗi thao tác update chỉ làm thay đổi $O(logN)$ nút trên cây. Như vậy ta hoàn toàn có thể lưu lại tất cả các thay đổi trên tất cả các nút trong $O(Q*logN)$.</p>
<p>Từ đó, ta rút ra được một tư tưởng cài đặt thuật toán:</p>
<ul>
<li>
<p>Với mỗi thao tác Update, ta tạo thêm một số nút mới trên IT. Để không phải sinh thêm các nút không bị thay đổi, một nút ở version mới có thể có con là một nút ở vesion cũ.</p>
<p>Chú ý: Mỗi thao tác Update luôn thay đổi một đường đi từ gốc đến một nút lá, nên không có trường hợp một nút ở version cũ có con là một nút ở version mới hơn. (Nếu thao tác Update là Update 1 đoạn, các nút bị thay đổi không còn là một đường đi nữa, nhưng nhận xét này vẫn đúng).</p>
</li>
<li>
<p>Khi thực hiện thao tác Query trên version t, ta chỉ cần thực hiện Query trên nút gốc ở version t.
Tư tưởng này còn được gọi là <strong>Path Copy</strong> trong các tài liệu tiếng Anh.</p>
</li>
</ul>
<h2 class="editable"><a class="anchor" id="cài-đặt" href="#cài-đặt"></a>Cài đặt:</h2>
<pre class="highlight"><code>
<span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">;</span>    <span class="c1">// ID of left child &amp; right child</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ln</span><span class="p">;</span>       <span class="c1">// Max value of node</span>
    <span class="n">Node</span><span class="p">()</span> <span class="p">{}</span>
    <span class="n">Node</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">ln</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span> <span class="o">:</span> <span class="n">ln</span><span class="p">(</span><span class="n">ln</span><span class="p">),</span> <span class="n">left</span><span class="p">(</span><span class="n">left</span><span class="p">),</span> <span class="n">right</span><span class="p">(</span><span class="n">right</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span> <span class="n">it</span><span class="p">[</span><span class="mi">11000111</span><span class="p">];</span>         <span class="c1">// Each node has a position in this array, called ID</span>
<span class="kt">int</span> <span class="n">nNode</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">ver</span><span class="p">[</span><span class="n">MN</span><span class="p">];</span>            <span class="c1">// ID of root in each version</span>

<span class="c1">// Update max value of a node</span>
<span class="kr">inline</span> <span class="kt">void</span> <span class="nf">refine</span><span class="p">(</span><span class="kt">int</span> <span class="n">cur</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">it</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">ln</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">it</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">left</span><span class="p">].</span><span class="n">ln</span><span class="p">,</span> <span class="n">it</span><span class="p">[</span><span class="n">it</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">right</span><span class="p">].</span><span class="n">ln</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Update a range, and return new ID of node</span>
<span class="kt">int</span> <span class="nf">update</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oldId</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
        <span class="o">++</span><span class="n">nNode</span><span class="p">;</span>
        <span class="n">it</span><span class="p">[</span><span class="n">nNode</span><span class="p">]</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">nNode</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="o">++</span><span class="n">nNode</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">u</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">it</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">left</span> <span class="o">=</span> <span class="n">update</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">it</span><span class="p">[</span><span class="n">oldId</span><span class="p">].</span><span class="n">left</span><span class="p">);</span>
        <span class="n">it</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">right</span> <span class="o">=</span> <span class="n">it</span><span class="p">[</span><span class="n">oldId</span><span class="p">].</span><span class="n">right</span><span class="p">;</span>
        <span class="n">refine</span><span class="p">(</span><span class="n">cur</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">it</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">left</span> <span class="o">=</span> <span class="n">it</span><span class="p">[</span><span class="n">oldId</span><span class="p">].</span><span class="n">left</span><span class="p">;</span>
        <span class="n">it</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">right</span> <span class="o">=</span> <span class="n">update</span><span class="p">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">it</span><span class="p">[</span><span class="n">oldId</span><span class="p">].</span><span class="n">right</span><span class="p">);</span>
        <span class="n">refine</span><span class="p">(</span><span class="n">cur</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">cur</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Get max of range. Same as usual IT</span>
<span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">nodeId</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&lt;</span> <span class="n">l</span> <span class="o">||</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">u</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">u</span> <span class="o">&lt;=</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">&lt;=</span> <span class="n">v</span><span class="p">)</span> <span class="k">return</span> <span class="n">it</span><span class="p">[</span><span class="n">nodeId</span><span class="p">].</span><span class="n">ln</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">max</span><span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">nodeId</span><span class="p">].</span><span class="n">left</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">),</span> <span class="n">get</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">nodeId</span><span class="p">].</span><span class="n">right</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">));</span>
<span class="p">}</span>


<span class="c1">// When update:</span>
    <span class="o">++</span><span class="n">nVer</span><span class="p">;</span>
    <span class="n">ver</span><span class="p">[</span><span class="n">nVer</span><span class="p">]</span> <span class="o">=</span> <span class="n">update</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">ver</span><span class="p">[</span><span class="n">nVer</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>

<span class="c1">// When query:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">get</span><span class="p">(</span><span class="n">ver</span><span class="p">[</span><span class="n">t</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</code></pre>
<p>Giải thích:</p>
<ul>
<li>Ban đầu, ta có một mảng it, lưu tất cả các nút sẽ được sinh ra của IT. Mỗi nút gồm có
<ul>
<li>Chỉ số của con trái, index của con phải (2 biến <code>left</code> và <code>right</code>)</li>
<li>Giá trị lớn nhất của các số trong khoảng mà nút quản lý (ở version khi nút đó được tạo ra): biến <code>ln</code>
</li>
</ul>
</li>
<li>Ta lưu thêm chỉ số của các nút gốc ở các version khác nhau vào một mảng <code>ver</code>
</li>
<li>Hàm <code>update</code>:
<ul>
<li>Tạo ra các nút mới, và trỏ đến các con ở version cũ hoặc version mới, tùy theo các con có bị thay đổi hay không</li>
<li>Trả lại index của nút mới được tạo</li>
</ul>
</li>
<li>Hàm <code>get</code>:
<ul>
<li>Trả lại max của một đoạn được quản lý bởi nút <code>nodeId</code>
</li>
</ul>
</li>
</ul>
<h2 class="editable"><a class="anchor" id="phân-tích" href="#phân-tích"></a>Phân tích</h2>
<ul>
<li>Cách cài đặt Persistent Data Structures trong mục này rất hiệu quả. Nó hoàn toàn không làm tăng thêm độ phức tạp (persistent IT có độ phức tạp mỗi thao tác là $O(logN)$), và bộ nhớ cần thêm là tối ưu: $O(Q * logN)$.</li>
<li>Tuy nhiên, cách cài đặt này không dễ áp dụng với những CTDL khác. Chẳng hạn sẽ rất khó để cài đúng BIT với phương pháp này. Ở mục tiếp theo, mình sẽ trình bày một phương pháp cài đặt khác có thể dùng cho BIT, tuy nhiên có độ phức tạp lớn hơn.</li>
</ul>
<h1 class="editable"><a class="anchor" id="3-persistent-bit" href="#3-persistent-bit"></a>3. Persistent BIT</h1>
<h2 class="editable"><a class="anchor" id="tư-tưởng-1" href="#tư-tưởng-1"></a>Tư tưởng:</h2>
<p>Tại mỗi nút của BIT, thay vì lưu một giá trị, ta lưu lại tất cả các cặp (version, giá trị) ở nút đó.</p>
<ul>
<li>Thao tác update rất đơn giản: chỉ cần thêm một cặp (version, giá trị) vào các nút tương ứng.</li>
<li>Với thao tác query tại version t, trên một nút, ta cần tìm cặp (version, giá trị) mới nhất vào trước thời điểm t - việc tìm kiếm này có thể được thực hiện bằng tìm kiếm nhị phân.</li>
</ul>
<p>Cách cài đặt này được gọi là <strong>Fat Node</strong> trong các tài liệu tiếng Anh.</p>
<h2 class="editable"><a class="anchor" id="cài-đặt-1" href="#cài-đặt-1"></a>Cài đặt:</h2>
<p>Code BIT trích từ bài IPSC 2011 - Grid Surveillance:</p>
<pre class="highlight"><code>
<span class="cp">#define _(x) (x &amp; (-(x)))
</span>
<span class="c1">// Persistent BIT</span>
<span class="n">vector</span><span class="o">&lt;</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">bit</span><span class="p">[</span><span class="mi">4100</span><span class="p">][</span><span class="mi">4100</span><span class="p">];</span>

<span class="c1">// Add val to cell (x, y) at time = time</span>
<span class="kt">void</span> <span class="nf">update</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">,</span> <span class="kt">int</span> <span class="n">time</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">u</span> <span class="o">&lt;=</span> <span class="mi">4096</span><span class="p">;</span> <span class="n">u</span> <span class="o">+=</span> <span class="n">_</span><span class="p">(</span><span class="n">u</span><span class="p">))</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="mi">4096</span><span class="p">;</span> <span class="n">v</span> <span class="o">+=</span> <span class="n">_</span><span class="p">(</span><span class="n">v</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">val</span><span class="p">));</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">][</span><span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
                <span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="n">val</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Get the sum of square (1,1) --&gt; (x, y) at time = time</span>
<span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">time</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">u</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">u</span> <span class="o">-=</span> <span class="n">_</span><span class="p">(</span><span class="n">u</span><span class="p">))</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">v</span> <span class="o">-=</span> <span class="n">_</span><span class="p">(</span><span class="n">v</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">][</span><span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">first</span> <span class="o">&lt;=</span> <span class="n">time</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">][</span><span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span> <span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">end</span><span class="p">(),</span> <span class="n">make_pair</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="mi">2000111000</span><span class="p">))</span>
                        <span class="o">-</span> <span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">].</span><span class="n">begin</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="n">bit</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">][</span><span class="n">pos</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<h2 class="editable"><a class="anchor" id="phân-tích-1" href="#phân-tích-1"></a>Phân tích:</h2>
<ul>
<li>Độ phức tạp cho mỗi thao tác update không thay đổi (ví dụ với BIT, vẫn là $O(logN)$). Nhưng độ phức tạp cho mỗi thao tác query bị tăng lên $logN$ (ví dụ với BIT, độ phức tạp cho mỗi thao tác là $O(log^2(N)$) thay vì $O(logN)$.</li>
<li>Tuy nhiên, cách cài đặt này tổng quát hơn, dễ dàng được áp dụng cho nhiều CTDL khác nhau, ví dụ cả BIT và IT.</li>
</ul>
<h1 class="editable"><a class="anchor" id="4-retroactive-data-structures" href="#4-retroactive-data-structures"></a>4. Retroactive Data Structures</h1>
<p>Một lớp CTDL khác tương đối giống với <strong>Persistent Data Structures</strong>, nhưng có tính ứng dụng thực tế cao hơn là <strong>Retroactive Data Structures</strong>:</p>
<p>"Retroactive Data Structures là loại CTDL cho phép thực hiện thay đổi với một dãy các thao tác đã được thực hiện trên dữ liệu. Ví dụ: Thay đổi một thao tác đã được thực hiện trong quá khứ".</p>
<p>Cả Retroactive Data Structures &amp; Persistent Data Structures đều quan tâm đến trục thời gian, tuy nhiên điểm khác nhau nằm ở chỗ cách xử lý trục thời gian của 2 CTDL này như thế nào:</p>
<ul>
<li>Với Persistent Data Structures, tất cả các version được lưu lại, và bạn không thể nào thay đổi một version trong quá khứ (điều duy nhất bạn có thể làm là tạo ra một version mới từ 1 version cũ và thực hiện thay đổi trên version mới này).</li>
<li>Với Retroactive Data Structures, bạn có thể thực hiện thay đổi trên một version cũ. Thay đổi trên một version cũ này ảnh hưởng đến tất cả các version sau nó.</li>
</ul>
<p>Sự khác biệt về cách xử lý trục thời gian khiến cho Retroactive Data Structures có rất nhiều ứng dụng trên thực tế - trái ngược hẳn với Persistent Data Structures chỉ thường được thấy ở trong các kỳ thi. Một vài ứng dụng quan trọng của Retroactive Data Structures gồm có:</p>
<ul>
<li>
<strong>Error Correction</strong>: Giả sử một dữ liệu bị nhập sai, làm ảnh hưởng đến tất cả các thao tác sau đấy. Retroactive DS cho phép sửa dữ liệu nhập sai và ảnh hưởng (tích cực) đến tất cả các thao tác sau đó.</li>
<li>
<strong>Bad data</strong>: Gần giống với Error Correction, nhưng dữ liệu sai bị xóa đi thay vì được sửa lại.</li>
<li>
<strong>Recovery</strong>: Giả sử một lỗi của phần cứng làm một số dữ liệu không được đọc. Retroactive DS cho phép đọc lại những dữ liệu này và thay đổi tất cả các thao tác được thực hiện sau đó.</li>
</ul>
<p>Trên thực tế, Retroactive Data Structures còn đang dừng lại ở việc là một khái niệm, chứ chưa có một phương pháp cài đặt nào hiệu quả. Các bạn nếu muốn tìm hiểu có thể nghiên cứu thêm về cơ chế rollback trong database hoặc tìm kiếm thêm về Retroactive Data Structures.</p>
<h1 class="editable"><a class="anchor" id="bài-tập-áp-dụng" href="#bài-tập-áp-dụng"></a>Bài tập áp dụng</h1>
<ul>
<li><a href="http://www.spoj.com/problems/COT/">SPOJ - COT</a></li>
<li><a href="http://www.spoj.com/problems/MKTHNUM/">SPOJ - MKTHNUM</a></li>
<li><a href="https://www.codechef.com/problems/QUERY">Codechef - QUERY</a></li>
<li><a href="https://www.codechef.com/problems/SORTING">Codechef - SORTING</a></li>
<li><a href="http://codeforces.com/problemset/problem/226/E">Codeforces - Round 140 Div 1 - E</a></li>
<li><a href="http://codeforces.com/contest/464/problem/E">Codeforces - Round 265 Div 1 - E</a></li>
<li><a href="http://ipsc.ksp.sk/2011/real/problems/g.html">IPSC 2011 - Grid Surveillance</a></li>
</ul>
</div>
</div>
</div>
</div>
