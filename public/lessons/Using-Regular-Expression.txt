<div id="wiki-content">
<h1 class="pt-4">Sử dụng Regex</h1>
<div class="breadcrumb"><nav aria-label="Breadcrumb"><ol>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/translate/">translate</a></li>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/translate/topcoder/">topcoder</a></li>
</ol></nav></div>
<div class>
<div id="wiki-body" class="gollum-markdown-content overflow-hidden ">
<div class="markdown-body ">
<p></p><div class="toc"><div class="toc-title">Table of Contents</div><ul><li><a href="#giới-thiệu">Giới thiệu</a></li><li><a href="#mô-tả-regex">Mô tả regex</a></li><li><a href="#sử-dụng-regex">Sử dụng regex</a><ul><li><a href="#debug-regex">Debug regex</a></li><li><a href="#trong-java">Trong Java</a></li><li><a href="#trong-c">Trong C++</a><ul><li><a href="#posix_regex">POSIX_regex</a><ul><li><a href="#ví-dụ">Ví dụ</a></li></ul></li><li><a href="#gnu_regex">GNU_regex</a><ul><li><a href="#ví-dụ-1">Ví dụ</a></li></ul></li></ul></li><li><a href="#ví-dụ-trong-các-cuộc-thi-srms">Ví dụ trong các cuộc thi SRMs</a></li></ul></li><li><a href="#tham-khảo">Tham khảo</a></li></ul></div>
<p>Bài viết gốc: <a href="https://www.topcoder.com/community/data-science/data-science-tutorials/using-regular-expressions-2/">Using Regular Expressions - đăng bởi Dan[Popovici] &amp; mariusmuja trên Topcoder</a></p>
<h1 class="editable"><a class="anchor" id="giới-thiệu" href="#giới-thiệu"></a>Giới thiệu</h1>
<p>Một <strong>regex</strong> (<em>regular expression</em>) là một chuỗi ký tự đặc biệt dùng để mô tả một <strong>mẫu tìm kiếm</strong> (<strong>search pattern</strong>). Hẳn là nhiều bạn đã nhìn thấy hoặc dùng regex trong các câu lệnh như <code>ls *.txt</code> (hoặc <code>dir *.txt</code>) để liệt kê ra tất cả các file có đuôi txt. Regex rất hữu dụng không chỉ trong việc tìm kiếm trên xâu (<em>pattern matching</em>) mà còn trong việc xử lý văn bản. Trong các kỳ SRMs thì regex có thể cực kỳ hữu ích. Vài dòng code sử dụng regex trong các bài toán xử lý text có thể khiến việc lập trình trở nên dễ thở hơn nhiều.</p>
<h1 class="editable"><a class="anchor" id="mô-tả-regex" href="#mô-tả-regex"></a>Mô tả regex</h1>
<p>Một regex là một hoặc nhiều "nhánh" không rỗng, được phân cách bởi ký tự <code>|</code>. Regex sẽ khớp với bất kỳ cái gì khớp với một trong các nhánh của nó. Regex sau sẽ khớp với bất kỳ từ nào trong 3 từ "the", "top", "coder".</p>
<pre class="highlight"><code>Regex: the|top|coder
INPUT: Marius is one of the topcoders.

Tìm thấy "the" bắt đầu ở vị trí 17 và kết thúc ở vị trí 20.
Tìm thấy "top" bắt đầu ở vị trí 21 và kết thúc ở vị trí 24.
Tìm thấy "coder" bắt đầu ở vị trí 24 và kết thúc ở vị trí 29.</code></pre>
<p>Một nhánh bao gồm một hoặc nhiều mảnh nối vào với nhau. Nó sẽ khớp với mảnh đầu tiên trước, rồi sau đó sẽ đến mảnh thứ 2, thứ 3, v.v.</p>
<p>Một mảnh là một nguyên tử (atom) có thể được theo sau bởi một trong các ký tự sau <code>*</code>, <code>+</code>, <code>?</code>, hoặc biên (<em>bound</em>):</p>
<ul>
<li>Một nguyên tử được theo sau bởi <code>*</code> sẽ khớp với chuỗi nào có 0 hoặc nhiều hơn phần khớp với nguyên tử đó.</li>
<li>Một nguyên tử được theo sau bởi <code>+</code> sẽ khớp với chuỗi nào có 1 hoặc nhiều hơn phần khớp với nguyên tử đó.</li>
<li>Một nguyên tử được theo sau bởi <code>?</code> sẽ khớp với chuỗi nào có 0 hoặc 1 phần khớp với nguyên tử đó.</li>
</ul>
<p>Regex sau sẽ khớp với chuỗi nào có chữ "top" và "coder" nối tiếp nhau:</p>
<pre class="highlight"><code>Regex: (top|coder)+
INPUT: This regex matches topcoder, codertop, toptop, toptoptop, codercoder...
Tìm thấy "topcoder" bắt đầu ở vị trí 19 và kết thúc ở vị trí 27.
Tìm thấy "codertop" bắt đầu ở vị trí 37 vả kết thúc ở vị trí 45.</code></pre>
<p>Một biên được bắt đầu bởi <code>{</code> được theo sau bởi 1 hoặc 2 số nguyên không dấu cách nhau bởi dấu <code>,</code>, và luôn kết thúc bởi <code>}</code>. Nếu có 2 số nguyên thì số thứ nhất sẽ không lớn hơn số thứ hai.</p>
<ul>
<li>Một nguyên tử theo sau bởi một biên chứa duy nhất một số nguyên $i$ thì sẽ khớp với xâu được ghép bởi đúng $i$ nguyên tử.</li>
<li>Một nguyên tử theo sau bởi một biên chứa duy nhất một số nguyên $i$ có dấu <code>,</code> đằng sau thì sẽ khớp với xâu được ghép bởi $i$ hoặc nhiều hơn $i$ nguyên tử.</li>
<li>Một nguyên tử theo sau bởi một biên chứa 2 số nguyên $i$, $j$ sẽ khớp với xâu được ghép bởi $i$ đến $j$ nguyên tử.</li>
</ul>
<p>Regex sau sẽ khớp với bất kỳ xâu nào có 2, 3 hoặc 4 ký tự <code>1</code>:</p>
<pre class="highlight"><code>Regex: 1{2,4}
INPUT: 101 + 10 = 111 , 11111 = 10000 + 1111
Tìm thấy "111" bắt đầu ở vị trí 11 và kết thúc ở vị trí 14.
Tìm thấy "1111" bắt đầu ở vị trí 17 và kết thúc ở vị trí 21
Tìm thấy "1111" bắt đầu ở vị trí 33 và kết thúc ở vị trí 37.</code></pre>
<p>Chúng ta có thể thấy rằng chuỗi dài nhất có thể sẽ được khớp và các đoạn được khớp sẽ không giao nhau. Một nguyên tử (atom) có thể là:</p>
<ul>
<li>Một regex được đặt trong dấu ngoặc tròn <code>()</code> (khớp với cả regex)</li>
<li>Một biểu thức ngoặc (xem ví dụ)</li>
<li>
<code>.</code> (khớp với bất kỳ ký tự nào)</li>
<li>
<code>^</code> (khớp với xâu rỗng ở đầu dòng)</li>
<li>
<code>$</code> (khớp với xâu rỗng ở cuối dòng)</li>
<li>Ký tự <code>\</code> được theo sau bởi một trong các ký tự <code>^.[$()\|\*+?{\</code> (khớp với các ký tự đặc biệt tương ứng)</li>
<li>Một ký tự (khớp với ký tự đó).</li>
<li>Ký tự <code>\</code> được theo sau bởi một chữ số $d$ khác 0. Nguyên tử này sẽ khớp với chuỗi ký tự giống với chuỗi ký tự được khớp bởi biểu thức con trong ngoặc tròn thứ $d$ (đánh số ngoặc tròn bằng vị trí của mở ngoặc từ trái qua phải). Ví dụ: <code>([bc])\1</code> sẽ khớp với <code>bb</code> hoặc <code>cc</code> và không khớp với <code>bc</code>.</li>
</ul>
<p>Regex sau đây khớp với một xâu được tạo bởi 2 chữ in thường giống nhau được phân cách bởi bất kỳ ký tự nào:</p>
<pre class="highlight"><code>Regex: ([a-z]+).\1
INPUT: top-topcoder|coder
Tìm thấy "top-top" bắt đầu ở vị trí 0 và kết thúc ở vị trí 7.
Tìm thấy "coder|coder" bắt đầu vở vị trí 7 và kết thúc ở vị trí 18.</code></pre>
<p>Một danh sách các ký tự được viết trong dấu <code>[]</code> khớp với bất ký ký tự đơn nào ở trong danh sách.</p>
<ul>
<li>Nếu danh sách được bắt đầu bởi <code>^</code>, nó sẽ khớp với bất kỳ ký tự nào <strong>không</strong> ở trong danh sách.</li>
<li>Nếu 2 ký tự trong danh sách được phân cách bởi <code>-</code> thì có nghĩa là danh sách này bao gồm tất cả các ký tự nằm trong "đoạn" với 2 đầu là 2 ký tự đó (ví dụ <code>[0-9]</code> khớp với bất kỳ chữ số thập phân nào).</li>
</ul>
<p>Tất cả các ký tự (ngoại trừ <code>]</code>, <code>^</code>, <code>-</code>), kể cả ký tự đặc biệt đều mất đi tính chất đặc biệt của nó trong biểu thức ngoặc.</p>
<p>Regex sau đây khớp với các từ không bắt đầu bởi <code>b</code>, <code>c</code>, <code>d</code> và kết thúc bởi <code>at</code>:</p>
<pre class="highlight"><code>Regex: [^b-d]at
INPUT: bat
Không tìm thấy xâu nào khớp.

Regex: [^b-d]at
INPUT: hat
Tìm thấy "hat" bắt đầu ở vị trí 0 và kết thúc ở vị trí 3.</code></pre>
<p>Ví dụ sau đây sẽ bao gồm hầu hết các định nghĩa ở phía trên đã nêu. Nó sẽ khớp với một cặp HTML tag đóng/mở và nội dung giữa 2 tag này.</p>
<pre class="highlight"><code>Regex: &lt;([a-zA-Z][a-zA-Z0-9]*)(()| [^&gt;]*)&gt;(.*)&lt;/\1&gt;
INPUT: &lt;font size="2"&gt;Topcoder is the&lt;/font&gt; &lt;b&gt;best&lt;/b&gt;
Tìm thấy "&lt;font size="2"&gt;Topcoder is the&lt;/font&gt;" bắt đầu ở vị trí 0 và kết thúc ở vị trí 37.
Tìm thấy "&lt;b&gt;best&lt;/b&gt;" bắt đầu ở vị trí 38 và kết thúc ở vị trí 49.</code></pre>
<p>Giải thích:</p>
<ul>
<li>
<code>([a-zA-Z][a-zA-Z0-9]\*)</code> sẽ khớp với bất kỳ từ nào bắt đầu bởi một chữ cái và tiếp tục bởi một số lượng chữ cái hoặc chữ số bất kỳ.</li>
<li>
<code>(()| [^&gt;]\*)</code> sẽ khớp với xâu rỗng hoặc bất kỳ xâu nào không chứa '&gt;'.</li>
<li>
<code>\1</code> khớp với xâu nào mà <code>([a-zA-Z][a-zA-Z0-9]\*)</code> đã khớp trước đó.</li>
</ul>
<p>Mô tả trên là mô tả sơ qua về regex cơ bản. Một regex được viết bởi các luật trên sẽ chạy được ở Java (&gt;= 1.4) và C++ (POSIX EXTENDED). Để tìm hiểu sâu hơn về các mở rộng được cung cấp bởi các ngôn ngữ khác mời các bạn xem phần tham khảo.</p>
<h1 class="editable"><a class="anchor" id="sử-dụng-regex" href="#sử-dụng-regex"></a>Sử dụng regex</h1>
<h2 class="editable"><a class="anchor" id="debug-regex" href="#debug-regex"></a>Debug regex</h2>
<p>Trong các ngôn ngữ lập trình khác nhau, thường regex có thể khác nhau đôi chút. Để kiểm tra 1 đoạn regex trong 1 ngôn ngữ có ý nghĩa gì, các bạn có thể lên search "debug regex online", có khá nhiều trang phù hợp.</p>
<h2 class="editable"><a class="anchor" id="trong-java" href="#trong-java"></a>Trong Java</h2>
<p>Trong Java (từ 1.4 trở lên) có một <em>package</em> tên là <code>java.util.regex</code> cho phép sử dụng regex.</p>
<p>Package này bao gồm 3 <em>class</em>: Pattern, Matcher, PatternSyntaxException.</p>
<ul>
<li>Object Pattern là một regex đã được biên dịch. Class Pattern không cung cấp public constructors. Để tạo ra một object, bạn phải sử dụng một trong các method của nó và chúng sẽ trả về một object Pattern.</li>
<li>Object Matcher sẽ tiến hành thông dịch mẫu và khớp với input. Giống như class Pattern, Matcher không có public constructors. Để tạo ra một object Matcher bạn phải sử dụng method của class Matcher trên một object Pattern và nó sẽ trả về một object Matcher.</li>
<li>Object PatternSyntaxException là unchecked exception chỉ ra lỗi cú pháp của regex.</li>
</ul>
<p>Ví dụ (lấy từ [4]):</p>
<pre class="highlight"><code><span class="nc">Pattern</span> <span class="n">pattern</span><span class="o">;</span>
<span class="nc">Matcher</span> <span class="n">matcher</span><span class="o">;</span>
<span class="n">pattern</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(&lt;</span><span class="no">REGEX</span><span class="o">&gt;);</span>
<span class="n">matcher</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(&lt;</span><span class="no">INPUT</span><span class="o">&gt;);</span>
<span class="kt">boolean</span> <span class="n">found</span><span class="o">;</span>
<span class="k">while</span><span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Found the text \""</span> <span class="o">+</span> <span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">()</span> <span class="o">+</span>  <span class="s">"\" starting at index "</span> <span class="o">+</span> <span class="n">matcher</span><span class="o">.</span><span class="na">start</span><span class="o">()</span> <span class="o">+</span>
      <span class="s">" and ending at index "</span> <span class="o">+</span> <span class="n">matcher</span><span class="o">.</span><span class="na">end</span><span class="o">()</span> <span class="o">+</span> <span class="s">"."</span><span class="o">);</span>
  <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>

<span class="k">if</span><span class="o">(!</span><span class="n">found</span><span class="o">){</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"No match found."</span><span class="o">);</span>
<span class="o">}</span></code></pre>
<p>Java cũng cung cấp các method sau trong class String:</p>
<ul>
<li>
<code>boolean matches(String regex)</code>: kiểm tra xem xâu hiện tại có khớp với <code>regex</code> không.</li>
<li>
<code>String replaceAll(String regex, String replacement)</code>: Thay tất cả các xâu con của xâu hiện tại mà khớp với <code>regex</code> bằng xâu <code>replacement</code>.</li>
<li>
<code>String replaceFirst(String regex, String replacement)</code>: Thay xâu con đầu tiên của xâu hiện tại mà khớp với <code>regex</code> bằng xâu <code>replacement</code>.</li>
<li>
<code>String[] split(String regex)</code>: Chia xâu hiện tại thành nhiều xâu sử dụng các xâu con khớp với <code>regex</code> làm phân cách.</li>
</ul>
<h2 class="editable"><a class="anchor" id="trong-c" href="#trong-c"></a>Trong C++</h2>
<p>Nhiều topcoders cho rằng regex là một trong những điểm mạnh của Java so với C++. Tuy nhiên các coders sử dụng C++ cũng không hề nản chí vì regex cũng có thể được sử dụng trong C++.</p>
<p>Có nhiều thư viện hỗ trợ regex cho C++, tuy nhiên chúng không tương thích với nhau tốt cho lắm. Một điều may mắn đó là bạn có thể chọn lựa một trong các thư viện này để sử dụng và không phải lo là nó không tương thích với nhau. Nếu bạn muốn dùng regex ở arena bạn phải lựa chọn giữa 2 APIs: POSIX_regex và GNU_regex. Để sử dụng 2 APIs này bạn phải thêm header "regex.h". Cả 2 APIs đều được thực hiện qua 2 bước. Đầu tiên sẽ có một hàm biên dịch regex, sau đó sẽ có một hàm khớp/tìm regex đã được biên dịch với xâu cần khớp.
Sau đây sẽ là mô tả ngắn gọn về 2 APIs này để cho các bạn có thể chọn lựa bạn thích cái nào hơn.</p>
<h3 class="editable"><a class="anchor" id="posix_regex" href="#posix_regex"></a>POSIX_regex</h3>
<p>POSIX_regex hỗ trợ 2 kiểu regex khác nhau: cơ bản và mở rộng. Regex cơ bản tương tự như trong ed, trong khi regex mở rộng tương tự như trong egrep, thêm vào các phép toán <code>|</code>, <code>+</code>, <code>?</code> và không yêu cầu <code>\</code> ở các biểu thức con viết trong ngoặc đơn <code>()</code> hoặc các biên được viết trong ngoặc nhọn <code>{}</code>. Kiểu cơ bản là mặc định, nhưng kiểu mở rộng được ưa thích hơn.</p>
<p>Với POSIX, bạn chỉ có thể tìm kiếm regex mà không thể khớp được. Để khớp được, bạn phải biên dịch nó thành một pattern buffer, sử dụng <code>regcomp</code>. Một khi đã biên dịch thành pattern buffer bạn có thể tìm kiếm trong một xâu kết thúc bằng null bằng cách dùng <code>regexec</code>. Nếu một trong hai hàm <code>regcomp</code> và <code>regexec</code> gặp lỗi nó sẽ trả về error code. Để biết được lỗi là gì bạn dùng <code>regerror</code>. Để giải phóng bộ nhớ của pattern buffer bạn dùng <code>regfree</code>.</p>
<p>Để biết cách sử dụng chi tiết mời các bạn xem mục [2] và [3] ở phần tham khảo.</p>
<h4 class="editable"><a class="anchor" id="ví-dụ" href="#ví-dụ"></a>Ví dụ</h4>
<p>Sau đây là một ví dụ về cách sử dụng các hàm này:</p>
<pre class="highlight"><code><span class="n">regex_t</span> <span class="n">reg</span><span class="p">;</span>

<span class="n">string</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s">"[^tpr]{2,}"</span><span class="p">;</span>
<span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"topcoder"</span><span class="p">;</span>

<span class="n">regmatch_t</span> <span class="n">matches</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

<span class="n">regcomp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reg</span><span class="p">,</span><span class="n">pattern</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span><span class="n">REG_EXTENDED</span><span class="o">|</span><span class="n">REG_ICASE</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="n">regexec</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reg</span><span class="p">,</span><span class="n">str</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span><span class="mi">1</span><span class="p">,</span><span class="n">matches</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Match "</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rm_so</span><span class="p">,</span><span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rm_eo</span><span class="o">-</span><span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rm_so</span><span class="p">)</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">" found starting at: "</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rm_so</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">" and ending at "</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">rm_eo</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Match not found."</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">regfree</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reg</span><span class="p">);</span></code></pre>
<h3 class="editable"><a class="anchor" id="gnu_regex" href="#gnu_regex"></a>GNU_regex</h3>
<p>GNU_regex API có nhiều hàm hơn. Với các hàm của GNU_regex các bạn có thể khớp một xâu với mẫu và cũng có thể tìm kiếm mẫu ở trong xâu. Việc sử dụng các hàm này cũng tương tự như việc sử dụng các hàm của POSIX: đầu tiên một mẫu cần phải được biên dịch sử dụng <code>re_compile_pattern</code>, sau đó nhận được pattern buffer và nó được dùng để tìm và khớp. Các hàm sử dụng cho tìm kiếm và khớp là <code>re_search</code> và <code>re_match</code>. Trong trường hợp tìm kiếm thì <code>fastmap</code> có thể được sử dụng để tối ưu việc tìm kiếm. Nếu không có <code>fastmap</code> thuật toán tìm kiếm sẽ khớp các mẫu ở các vị trí liên tiếp nhau trong xâu. Fastmap sẽ chỉ ra vị trí của ký tự bắt đầu tìm kiếm. Fastmap được tạo bằng cách gọi <code>re_compile_fastmap</code>. GNU_regex còn có hàm <code>re_search2</code> và <code>re_match2</code> cho việc tìm kiếm và khớp với những data tách rời. Để giải phóng bộ nhớ của pattern buffer bạn dùng <code>regfree</code>.</p>
<p>Để biết cách sử dụng chi tiết mời các bạn xem mục [3] ở phần tham khảo.</p>
<h4 class="editable"><a class="anchor" id="ví-dụ-1" href="#ví-dụ-1"></a>Ví dụ</h4>
<pre class="highlight"><code><span class="n">string</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s">"([a-z]+).</span><span class="se">\\</span><span class="s">1"</span><span class="p">;</span>
<span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"top-topcoder|coder"</span><span class="p">;</span>

<span class="n">re_pattern_buffer</span> <span class="n">buffer</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">map</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>

<span class="n">buffer</span><span class="p">.</span><span class="n">translate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">fastmap</span> <span class="o">=</span> <span class="n">map</span><span class="p">;</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">buffer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">allocated</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="n">re_set_syntax</span><span class="p">(</span><span class="n">RE_SYNTAX_POSIX_EXTENDED</span><span class="p">);</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">status</span> <span class="o">=</span> <span class="n">re_compile_pattern</span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span><span class="n">pattern</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Error: "</span> <span class="o">&lt;&lt;</span> <span class="n">status</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">re_compile_fastmap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">);</span>

<span class="k">struct</span> <span class="nc">re_registers</span> <span class="n">regs</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">ofs</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">re_search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">,</span><span class="n">str</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span><span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span><span class="o">&amp;</span><span class="n">regs</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Match "</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">regs</span><span class="p">.</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">regs</span><span class="p">.</span><span class="n">end</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">regs</span><span class="p">.</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">" found starting at: "</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">regs</span><span class="p">.</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">" and ending at "</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">regs</span><span class="p">.</span><span class="n">end</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Match not found."</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">regfree</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">);</span></code></pre>
<h2 class="editable"><a class="anchor" id="ví-dụ-trong-các-cuộc-thi-srms" href="#ví-dụ-trong-các-cuộc-thi-srms"></a>Ví dụ trong các cuộc thi SRMs</h2>
<p>Các ví dụ phía dưới được viết bằng Java. Bạn nào dùng C++ có thể dùng POSIX hoặc GNU regex APIs để viết các hàm tương đương trong Java (replace_all, split, matches).<br/>
<strong><a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=2396&amp;rd=4755">CyberLine</a> (SRM 187 div 1, level 1)</strong></p>
<p></p><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cyberline</span>
<span class="o">{</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">lastCyberword</span><span class="o">(</span><span class="nc">String</span> <span class="n">cyberline</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">String</span><span class="o">[]</span><span class="n">w</span><span class="o">=</span><span class="n">cyberline</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"-"</span><span class="o">,</span><span class="s">""</span><span class="o">)</span>
          <span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"[^a-zA-Z0-9]"</span><span class="o">,</span><span class="s">" "</span><span class="o">)</span>
          <span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)</span> <span class="o">;</span>
    <span class="k">return</span> <span class="n">w</span><span class="o">[</span><span class="n">w</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre>
<strong><a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=2912&amp;rd=5849">UnLinker</a> (SRM 203 div 2, level 3)</strong>
<pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnLinker</span>
<span class="o">{</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">clean</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">String</span> <span class="o">[]</span><span class="n">m</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"((http://)?www[.]|http://)[a-zA-Z0-9.]+[.](com|org|edu|info|tv)"</span><span class="o">,-</span><span class="mi">1</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
      <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">"OMIT"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="n">m</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">;</span>
    <span class="k">return</span> <span class="n">s</span> <span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre>
<p><strong><a href="http://community.topcoder.com/stat?c=problem_statement&amp;pm=1779&amp;rd=4575">CheatCode</a> (SRM 154 div 1, level 1)</strong></p>
<pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CheatCode</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">matches</span><span class="o">(</span><span class="nc">String</span> <span class="n">keyPresses</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">codes</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="o">[]</span><span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">codes</span><span class="o">.</span><span class="na">length</span><span class="o">]</span> <span class="o">;</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">codes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
    <span class="o">{</span>
      <span class="nc">String</span> <span class="n">regex</span> <span class="o">=</span> <span class="s">".*"</span> <span class="o">;</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">codes</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">((</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="o">)&lt;</span><span class="n">codes</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">codes</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="o">)==</span><span class="n">codes</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="n">k</span><span class="o">++;</span>
        <span class="n">regex</span> <span class="o">=</span> <span class="n">regex</span> <span class="o">+</span> <span class="n">codes</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">+</span> <span class="s">"{"</span><span class="o">+</span><span class="n">k</span><span class="o">+</span><span class="s">",}"</span><span class="o">;</span>
        <span class="n">j</span><span class="o">+=</span><span class="n">k</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="n">regex</span> <span class="o">=</span> <span class="n">regex</span> <span class="o">+</span> <span class="s">".*"</span> <span class="o">;</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">keyPresses</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">regex</span><span class="o">))</span>
      <span class="o">{</span>
        <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span> <span class="o">;</span>
        <span class="n">count</span><span class="o">++</span> <span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="kt">int</span> <span class="o">[]</span><span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">count</span><span class="o">]</span> <span class="o">;</span>
    <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">codes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
      <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span>
        <span class="n">res</span><span class="o">[</span><span class="n">j</span><span class="o">++]=</span><span class="n">i</span> <span class="o">;</span>
    <span class="k">return</span> <span class="n">res</span> <span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre>
<h1 class="editable"><a class="anchor" id="tham-khảo" href="#tham-khảo"></a>Tham khảo</h1>
<ol>
<li>Xem trang hướng dẫn của linux: regex(7)</li>
<li>Xem trang hướng dẫn của linux: regex(3)</li>
<li><a href="http://docs.freebsd.org/info/regex/regex.info.Programming_with_Regex.html">http://docs.freebsd.org/info/regex/regex.info.Programming_with_Regex.html</a></li>
<li><a href="http://www.regular-expressions.info/">http://www.regular-expressions.info/</a></li>
<li><a href="http://java.sun.com/docs/books/tutorial/extra/regex/">http://java.sun.com/docs/books/tutorial/extra/regex/</a></li>
</ol>
</div>
</div>
</div>
</div>
