<div id="wiki-content">
<h1 class="pt-4">Khử nhân ma trận</h1>
<div class="breadcrumb"><nav aria-label="Breadcrumb"><ol>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/">algo</a></li>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/trick/">trick</a></li>
</ol></nav></div>
<div class>
<div id="wiki-body" class="gollum-markdown-content overflow-hidden ">
<div class="markdown-body ">
<p><strong>Tác giả</strong>: <a href="http://news.zing.vn/thay-giao-sinh-nam-1997-cua-cac-cao-thu-hsg-quoc-gia-post480645.html">Nguyễn Tiến Trung Kiên</a></p>
<p><strong>Đôi lời về tác giả</strong>:</p>
<p>Nguyễn Tiến Trung Kiên là cựu học sinh Chuyên Tổng Hợp, với 1 HCĐ IOI năm 2014 và 1 HCB IOI năm 2015. Kiên còn nổi tiếng với <a href="https://sites.google.com/site/kc97ble/">blog chứa code nhiều thuật toán</a> và series <a href="https://www.facebook.com/kcxxble">Free contest</a>.</p>
<p></p><div class="toc"><div class="toc-title">Table of Contents</div><ul><li><a href="#giới-thiệu">Giới thiệu</a></li><li><a href="#bắt-đầu-bằng-ví-dụ-đơn-giản-nhất">Bắt đầu bằng ví dụ đơn giản nhất</a></li><li><a href="#tổng-quát">Tổng quát</a></li><li><a href="#f-n-f-n-1-f-n-2">$f(n) = f(n-1) + f(n-2)$</a></li></ul></div>
<h1 class="editable"><a class="anchor" id="giới-thiệu" href="#giới-thiệu"></a>Giới thiệu</h1>
<p><a class="internal absent" href="https://vnoi.info/wiki/algo/trick/matrix-multiplication">Nhân ma trận</a> thật sự hữu dụng. Có nhiều bài toán khi $n$ nhỏ, ta dùng <strong>DP</strong> (<strong>Dynamic Programming - Quy Hoạch Động</strong>) để giải. Nhưng khi $n$ lớn (khoảng $10^9$), ta phải dùng nhân ma trận để giảm <strong>độ phức tạp</strong>. Trong quá trình code nhân ma trận, việc sinh ra ma trận gốc không phải lúc nào cũng đơn giản. Tôi đã tìm ra một phương pháp tốt để giải những bài toán này mà không cần nhân ma trận.</p>
<p>Khi dùng phương pháp này, ta không cần phải sinh ma trận gốc và không cần cài phép toán nhân hai ma trận $A * B$ và luỹ thừa ma trận $A^k$. Tuy nhiên, phương pháp này chỉ dùng được trong các bài toán đếm, nghĩa là nó không thể hoàn toàn thay thế nhân ma trận.</p>
<h1 class="editable"><a class="anchor" id="bắt-đầu-bằng-ví-dụ-đơn-giản-nhất" href="#bắt-đầu-bằng-ví-dụ-đơn-giản-nhất"></a>Bắt đầu bằng ví dụ đơn giản nhất</h1>
<p>Để ví dụ, tôi sẽ dùng bài toán sau:</p>
<p>Đếm xem có bao nhiêu dãy ngoặc đúng độ dài $n$ mà độ sâu không quá $L$. $(n \le 10^9, L \le 10)$.</p>
<p>Ví dụ, khi $n = 4$ và $L = 1$, thì <code>()()</code> là dãy ngoặc đúng duy nhất thoả mãn, còn <code>(())</code>, <code>((()</code>, và <code>))((</code> thì không thoả mãn.</p>
<p>Bài toán này có thể giải bằng phương pháp <strong>Quy hoạch động</strong> như sau:</p>
<ul>
<li>Nhận xét: Nếu ta đi qua lần lượt từng ký tự của dãy ngoặc và duy trì một biến <code>sum</code>: Khi gặp <code>(</code> ta tăng <code>sum</code> lên 1 đơn vị. Khi gặp <code>)</code> ta giảm <code>sum</code> đi 1 đơn vị. 1 dãy ngoặc là dãy ngoặc đúng nếu thỏa mãn 2 điều kiện sau:
<ul>
<li>Không có thời điểm nào <code>sum</code> nhỏ hơn 0</li>
<li>Đến cuối cùng, <code>sum</code> bằng 0.</li>
</ul>
</li>
<li>Đồng thời, nếu làm như trên, độ sâu của dãy ngoặc chính là giá trị tối đã của <code>sum</code> trong quá trình trên.</li>
</ul>
<p>Từ nhận xét trên, ta tìm ra công thức $f(n, h) = f(n - 1, h - 1) + f(n - 1, h + 1)$ trong đó $f(n, h)$ là số dãy mà phần còn lại cần xây dựng có độ dài $n$ và tổng hiện tại (sum) là $h$. Mục tiêu của chúng ta là tính $f(n, 0)$. Tất nhiên độ phức tạp của hàm $f$ là quá lớn.</p>
<p>Bây giờ, gọi $f(n, h, h_0)$ là số dãy độ dài $n$ bắt đầu từ tổng $h$ và kết thúc tại tổng $h_0$.</p>
<p>Xét các trường hợp:</p>
<ul>
<li>Nếu $n = 0$: trả về 1 nếu $h=h_0$, trả về 0 nếu ngược lại.</li>
<li>Nếu $n = 2 * k$: $f(2 * k, h, h_0) = \sum{f(k, h, i) * f(k, i, h_0)}$ với mọi $i$ trong khoảng $[0, L]$.</li>
<li>Nếu $n = 2 * k + 1$: $f(2 * k+1, h, h_0) = f(2 * k, h-1, h_0) + f(2 * k, h+1, h_0)$.</li>
</ul>
<p>Ngoài ra, chú ý đến trường hợp sau: nếu $h&lt;0$ hoặc $h&gt;L$ thì trả về 0.</p>
<p>Mục tiêu của ta là tính $f(n, 0, 0)$.</p>
<p>Độ phức tạp của phương pháp này là $\mathcal{O}(L^3 log n)$, nhanh bằng với nhân ma trận. Chú ý rằng ta chỉ có $\mathcal{O}(L^2 log n)$ trạng thái, không phải là $\mathcal{O}(L^2 n)$. Chẳng hạn khi $n=100$, các giá trị của $n$ sẽ nằm trong tập sau: ${100, 50, 25, 24, 12, 6, 3, 2, 1, 0}$. Thế nên $n$ chỉ nhận khoảng $2*log n$ giá trị trong tập hợp đó. Ta có thể dùng độ sâu của hàm $f$ để đại diện cho $n$.</p>
<pre class="highlight"><code>function f(n, h, h_0, Depth):
    if h &lt; 0 or h &gt; L:
      return 0
    if n == 0:
      return (h==h_0 ? 1 : 0)

    if Saved[h][h_0][Depth]:
      return Value[h][h_0][Depth]

    if n is even:
        Result = 0
        for i in 0..L:
          Result += f(n/2, h, i, Depth+1) * f(n/2, i, h_0, Depth+1)
    else:
        Result = f(n-1, h-1, h_0, Depth+1) + f(n-1, h+1, h_0, Depth+1)

    Saved[h][h_0][Depth] = true
    Value[h][h_0][Depth] = Result

input n, L
output f(n, 0, 0, 0)</code></pre>
<h1 class="editable"><a class="anchor" id="tổng-quát" href="#tổng-quát"></a>Tổng quát</h1>
<p>Với trường hợp $f(n, [a,b,c,…])$ được tính từ $f(n-1, [a,b,c,…])$</p>
<p>Có $t$ loại hoa $(t \ge 4)$. 4 trong $t$ loại hoa này là <code>g</code> (gerbera), <code>o</code> (orchid), <code>a</code> (azalea) và <code>h</code> (hydrangea). Ta dùng các loại hoa này để tạo một dãy $n$ chậu hoa $(n \le 10^9)$. Có vài điều kiện được đặt ra như sau:</p>
<ul>
<li>Một chậu <code>h</code> phải được đặt giữa một <code>a</code> và một <code>o</code>
</li>
<li>Giữa hai chậu <code>g</code> bất kì, phải có ít nhất $p$ chậu hoa loại khác $(p \le 20)$.</li>
</ul>
<p>Giả sử có 5 loại hoa ($t=5$): <code>a</code>, <code>h</code>, <code>o</code>, <code>g</code>, và <code>b</code> (begonias).</p>
<p>Với $n=6$, có 2906 dãy chậu đúng, 5 trong số đó là <code>aoaaoo</code>, <code>ahohag</code>, <code>gbbbgo</code>, <code>gbbbog</code>, <code>bbbbbb</code>.</p>
<p>Những dãy sau đây không hợp lệ: <code>ohoaha</code> (đoạn <code>aha</code> không hợp lệ vì bên cạnh <code>h</code> phải có một <code>o</code> và một <code>a</code>), <code>gogbao</code> (giữa hai <code>g</code> phải có ít nhất 3 hoa khác), <code>ahoaha</code> (chậu <code>h</code> cuối cùng không kề với một <code>a</code> và một <code>o</code>).</p>
<p>Không khó lắm để tìm ra công thức quy hoạch động: $f(n, x, Just)$ trả về số dãy chậu đúng. Trạng thái $n$, $x$, $Just$ được mô tả như sau:</p>
<ul>
<li>$n$ là độ dài còn lại phải xây dựng của dãy đang xây dựng.</li>
<li>$x$ là số chậu hoa ta vừa đặt mà khác <code>g</code>, nói cách khác tất cả các chậu hoa trong khoảng $n+1$ đến $n+x$ không phải là <code>g</code>.</li>
<li>$Just$ đại diện cho chậu hoa vừa đặt (tức là chậu $n+1$). $Just=1$ nghĩa là <code>a</code> hoặc <code>o</code>, $Just=2$ nghĩa là <code>h</code>, $Just=0$ nghĩa là các loại hoa còn lại (bao gồm <code>g</code> và $t-4$ loại hoa khác).</li>
</ul>
<p>Hàm quy hoạch động trên có thể chạy với $n \le 10,000$.</p>
<p>Bây giờ tôi sẽ nói cách giải đúng. Gọi $f(n, p, Just, p_0, Just_0)$ nghĩa là: ta xuất phát từ trạng thái $(n, p, Just)$, có bao nhiêu cách đi đến trạng thái $(0, p_0, Just_0)$.</p>
<pre class="highlight"><code><span class="kt">long</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">Just</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">&gt;=</span><span class="n">p</span><span class="p">)</span> <span class="n">x</span><span class="o">=</span><span class="n">p</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">Just</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">F</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">Just</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="k">return</span> <span class="n">F</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">Just</span><span class="p">][</span><span class="n">n</span><span class="p">];</span>
        <span class="kt">long</span> <span class="n">Sum</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Just</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="n">Sum</span> <span class="o">+=</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">&gt;=</span><span class="n">p</span><span class="p">)</span> <span class="n">Sum</span> <span class="o">+=</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">Sum</span> <span class="o">+=</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">F</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">Just</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">Sum</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">::</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span></code></pre>
<p>Ta có các trường hợp:</p>
<ul>
<li>Nếu $n=0$ hoặc $n=2 * k+1$, ta viết như hàm $f$ cũ. Nếu $n \ne 0$, nó sẽ gọi đến một trạng thái khác mà lúc này $n$ chẵn.</li>
<li>Ngược lại, $n=2 * k$, $f(2 *k, p, Just, p_0, Just_0) = \sum{f(k, p, Just, i, j) * f(k, i, j, p_0, Just_0)}$ với tất cả bộ $i$, $j$ hợp lệ (tức là $i$ nằm trong khoảng [0, p], $j$ nằm trong khoảng $[0, 2]$).</li>
</ul>
<p>Chú ý tại trường hợp $n=0$, việc $n=0$ không có nghĩa đó là kết thúc của một dãy. Vì ta chia dãy thành các phần nhỏ hơn, $n=0$ chỉ có nghĩa là kết thúc của một phần nhỏ. Vì thế ta sẽ thêm một biến $Stop$ thuộc kiểu boolean. Khi $Stop=true$, $f(n,p,Just,p_0,Just_0) = f(n,p,Just)$, ngược lại, tức là $Stop=false$, $f(n,p,Just,p_0,Just_0,Stop) = f(n,p,Just,p_0,Just_0)$.</p>
<pre class="highlight"><code><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">G</span><span class="p">[</span><span class="mi">21</span><span class="p">][</span><span class="mi">3</span><span class="p">][</span><span class="mi">21</span><span class="p">][</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
<span class="cp">#define C p][Just][p0][Just0][Stop
</span>
<span class="kt">long</span> <span class="nf">g</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">Just</span><span class="p">,</span> <span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">Just0</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">Stop</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">&gt;=::</span><span class="n">p</span><span class="p">)</span> <span class="n">p</span><span class="o">=::</span><span class="n">p</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span> <span class="o">||</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Just</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">Stop</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">p</span><span class="o">==</span><span class="n">p0</span> <span class="o">&amp;&amp;</span> <span class="n">Just</span><span class="o">==</span><span class="n">Just0</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">Just0</span><span class="p">,</span> <span class="n">Stop</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">Stop</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">p</span><span class="o">==</span><span class="n">p0</span> <span class="o">&amp;&amp;</span> <span class="n">Just</span><span class="o">==</span><span class="n">Just0</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">C</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="k">return</span> <span class="n">G</span><span class="p">[</span><span class="n">C</span><span class="p">][</span><span class="n">n</span><span class="p">];</span>
            <span class="kt">long</span> <span class="n">Sum</span> <span class="o">=</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">Just0</span><span class="p">,</span> <span class="n">Stop</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">Just</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="n">Sum</span> <span class="o">+=</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">Just0</span><span class="p">,</span> <span class="n">Stop</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">&gt;=::</span><span class="n">p</span><span class="p">)</span> <span class="n">Sum</span> <span class="o">+=</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">Just0</span><span class="p">,</span> <span class="n">Stop</span><span class="p">);</span>
            <span class="n">Sum</span> <span class="o">+=</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">Just0</span><span class="p">,</span> <span class="n">Stop</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">G</span><span class="p">[</span><span class="n">C</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">Sum</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">C</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="k">return</span> <span class="n">G</span><span class="p">[</span><span class="n">C</span><span class="p">][</span><span class="n">n</span><span class="p">];</span>
        <span class="kt">long</span> <span class="n">Sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=::</span><span class="n">p</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;=</span><span class="mi">2</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">long</span> <span class="n">G1</span> <span class="o">=</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">Just</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
             <span class="kt">long</span> <span class="n">G2</span> <span class="o">=</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">Just0</span><span class="p">,</span> <span class="n">Stop</span><span class="p">);</span>
            <span class="n">Sum</span> <span class="o">+=</span> <span class="n">G1</span><span class="o">*</span><span class="n">G2</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">G</span><span class="p">[</span><span class="n">C</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">Sum</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
     <span class="p">}</span>
<span class="p">}</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">::</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">21</span><span class="p">,</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">3</span><span class="p">,</span> <span class="nb">true</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span></code></pre>
<p>Chú ý ở code trên, <code>::p</code> và <code>p</code> là khác nhau. <code>::p</code> là biến <code>p</code> toàn cục, tức là <code>p</code> được nhập từ input. Còn <code>p</code> là tham số ở trong hàm <code>g</code>. <code>Rand()%21</code> và <code>rand()%3</code> là hai số mà ta có thể bỏ qua giá trị của chúng (khi nào mà <code>Stop=true</code> thì <code>p0</code> và <code>Just0</code> không có ý nghĩa).</p>
<p>Độ phức tạp ở code trên là $\mathcal{O}(p^3 log^2 n)$. Thực tế, ta có thể không dùng <code>map</code>, bằng cách thêm một tham số là <code>Depth</code> đại diện cho độ sâu của hàm quy hoạch động. Khi đó, độ phức tạp mất đi một thừa số $log n$, giảm xuống còn $\mathcal{O}(p^3 log n)$. Code trên tôi dùng <code>map</code> cho nó dễ hiểu.</p>
<h1 class="editable"><a class="anchor" id="f-n-f-n-1-f-n-2" href="#f-n-f-n-1-f-n-2"></a>$f(n) = f(n-1) + f(n-2)$</h1>
<p>Bây giờ, chúng ta sẽ tính số fibonacci thứ $10^9$ (trong một modulo nào đó). Chắc hẳn là bạn đã biết cách dùng nhân ma trận, nó khá dễ. Tuy nhiên, bây giờ chúng ta sẽ thử giải bằng cách không dùng nhân ma trận. Xem bài toán sau:</p>
<p>Bạn đang đứng ở điểm $n$ trên trục Ox. Mỗi bước, bạn có thể di chuyển sang trái 1 hoặc 2 bước. Có bao nhiêu cách để bạn đi tới vị trí 0?</p>
<p>Không khó để nhận ra $f(n) = f(n-1) + f(n-2)$, trong đó $f(0)=1$ và $f(1)=1$. Thế nên, $f(n)$ là số fibonacci thứ $n+1$.</p>
<p>Có hai trường hợp:</p>
<ul>
<li>$n=2 * k$, ta có hai lựa chọn:
<ul>
<li>Lựa chọn thứ nhất là nhảy từ $2 * k$ đến $k$ rồi nhảy từ $k$ đến 0.</li>
<li>Lựa chon thứ hai là nhảy từ $2 * k$ đến $k+1$, sau đó di chuyển sang trái 2 bước, tức là từ $k+1$ đến $k-1$, rồi nhảy từ $k-1$ đến 0 (chú ý ta không hề nhảy vào ô thứ $k$).
Thế nên, $f(2 * k) = f(k) * f(k) + f(k-1) * f(k-1)$.</li>
</ul>
</li>
<li>$n=2 * k+1$, bây giờ ta chia dãy thành hai đoạn $0..k$ và $k..n$ (đoạn thứ nhất độ dài $k+1$, đoạn thứ hai dài $k$), ta lại có hai lựa chọn:
<ul>
<li>Lựa chọn thứ nhất là nhảy từ $n$ đến $k$ rồi nhảy từ $k$ đến 0.</li>
<li>Lựa chọn thứ hai là nhảy từ $n$ đến $k+1$, di chuyển sang trái 2 bước, rồi nhảy từ $k-1$ đến 0. Thế nên $f(2 * k+1) = f(k) * f(k+1) + f(k-1) * f(k)$.</li>
</ul>
</li>
</ul>
<p>Lúc này độ phức tạp là $\mathcal{O}(log n)$. Bởi vì với mỗi độ sâu, chỉ có tối đa 4 giá trị $n$.</p>
<pre class="highlight"><code><span class="n">map</span><span class="o">&lt;</span><span class="kt">long</span><span class="p">,</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">F</span><span class="p">;</span>
<span class="n">F</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">F</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>

<span class="kt">long</span> <span class="nf">f</span><span class="p">(</span><span class="kt">long</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="k">return</span> <span class="n">F</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
     <span class="kt">long</span> <span class="n">k</span><span class="o">=</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// n=2*k</span>
         <span class="k">return</span> <span class="n">F</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">*</span> <span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">+</span> <span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// n=2*k+1</span>
         <span class="k">return</span> <span class="n">F</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">*</span> <span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">f</span><span class="p">(</span><span class="n">k</span><span class="p">))</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
     <span class="p">}</span>
<span class="p">}</span></code></pre>
</div>
</div>
</div>
</div>
