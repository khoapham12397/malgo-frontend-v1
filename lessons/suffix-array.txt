<div id="wiki-content">
<h1 class="pt-4">Mảng hậu tố (Suffix Array)</h1>
<div class="breadcrumb"><nav aria-label="Breadcrumb"><ol>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/">algo</a></li>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/data-structures/">data-structures</a></li>
</ol></nav></div>
<div class>
<div id="wiki-body" class="gollum-markdown-content overflow-hidden ">
<div class="markdown-body ">
<p><strong>Mảng Hậu Tố</strong> là một CTDL giúp <strong>sort</strong> các <strong>hậu tố</strong> theo <strong>thứ tự từ điển</strong>.</p>
<p>Mảng này chứa các số nguyên, khởi đầu của các hậu tố.</p>
<p>Có 2 cách để xây dựng một mảng hậu tố:</p>
<ol>
<li>
<strong>Thuật toán không xác định:</strong> Sử dụng thuật toán <strong>Rabin-Karp</strong> và kiểm tra nếu một hậu tố có thứ tự từ điển nhỏ hơn một hậu tố khác,tìm <strong>mảng tiền tố chung lớn nhất</strong> (<strong>LCP</strong>), sau đó sử dụng <strong>Tìm Kiếm Nhị Phân</strong> và <strong>hàm băm</strong> (<strong>Hash</strong>) và kiểm tra ký tự tiếp theo sau <strong>LCP</strong> của chúng.</li>
</ol>
<p><em>Code C++:</em></p>
<pre class="highlight"><code>
<span class="k">namespace</span> <span class="n">HashSuffixArray</span> <span class="p">{</span>

    <span class="k">const</span> <span class="kt">int</span> <span class="n">MAXN</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">21</span><span class="p">;</span>

    <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">hash</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">hash</span> <span class="n">BASE</span> <span class="o">=</span> <span class="mi">137</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">S</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sa</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
    <span class="n">hash</span> <span class="n">h</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span> <span class="n">hPow</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>

    <span class="cp">#define getHash(lo, size) (h[lo] - h[(lo) + (size)] * hPow[size])
</span>
    <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">sufCmp</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">lo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="n">i</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="n">j</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">getHash</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span> <span class="o">==</span> <span class="n">getHash</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">mid</span><span class="p">))</span>
                <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">hi</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">hi</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">buildSA</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">N</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">S</span><span class="p">);</span>
        <span class="n">hPow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="n">hPow</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">hPow</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">BASE</span><span class="p">;</span>
        <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
            <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">BASE</span> <span class="o">+</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">sa</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

        <span class="n">stable_sort</span><span class="p">(</span><span class="n">sa</span><span class="p">,</span> <span class="n">sa</span> <span class="o">+</span> <span class="n">N</span><span class="p">,</span> <span class="n">sufCmp</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span> <span class="c1">// end namespace HashSuffixArray</span>
</code></pre>
<ol>
<li>
<strong>Thuật toán xác định:</strong> Sort log(Độ dài lớn nhất) bước, với bước thứ i (tính từ 0), sort chúng theo $2^i$ ký tự đầu tiên và đưa hậu tố có cùng tiền tố với $2^{i}$ ký tự vào cùng một bucket.</li>
</ol>
<p><em>Code:</em></p>
<pre class="highlight"><code>
<span class="cm">/*
Suffix array O(n lg^2 n)
LCP table O(n)
*/</span>
<span class="cp">#include &lt;cstdio&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="cp">#define REP(i, n) for (int i = 0; i &lt; (int)(n); ++i)
</span>
<span class="k">namespace</span> <span class="n">SuffixArray</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">MAXN</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">21</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">S</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">gap</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sa</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span> <span class="n">pos</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span> <span class="n">lcp</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>

    <span class="kt">bool</span> <span class="n">sufCmp</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">pos</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">pos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pos</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="n">gap</span><span class="p">;</span>
        <span class="n">j</span> <span class="o">+=</span> <span class="n">gap</span><span class="p">;</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">)</span> <span class="o">?</span> <span class="n">pos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pos</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">:</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">j</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">buildSA</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">N</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">S</span><span class="p">);</span>
        <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span> <span class="n">sa</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="n">pos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">gap</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;;</span> <span class="n">gap</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">sort</span><span class="p">(</span><span class="n">sa</span><span class="p">,</span> <span class="n">sa</span> <span class="o">+</span> <span class="n">N</span><span class="p">,</span> <span class="n">sufCmp</span><span class="p">);</span>
            <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">sufCmp</span><span class="p">(</span><span class="n">sa</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">sa</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
            <span class="n">REP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span> <span class="n">pos</span><span class="p">[</span><span class="n">sa</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span><span class="p">[</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">buildLCP</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">pos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">sa</span><span class="p">[</span><span class="n">pos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="n">S</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">k</span><span class="p">];)</span>
            <span class="o">++</span><span class="n">k</span><span class="p">;</span>
            <span class="n">lcp</span><span class="p">[</span><span class="n">pos</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">k</span><span class="p">)</span><span class="o">--</span><span class="n">k</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span> <span class="c1">// end namespace SuffixArray</span>
</code></pre>
<p>Source: <a href="http://codeforces.com/profile/mukel">mukel</a></p>
<h1 class="editable"><a class="anchor" id="tài-liệu-tham-khảo" href="#tài-liệu-tham-khảo"></a>Tài liệu tham khảo:</h1>
<ul>
<li><a href="http://codeforces.com/blog/entry/15729">Codeforces</a></li>
</ul>
</div>
</div>
</div>
</div>
