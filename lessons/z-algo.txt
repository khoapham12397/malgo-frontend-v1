<div id="wiki-content">
<h1 class="pt-4">Z Algorithm</h1>
<div class="breadcrumb"><nav aria-label="Breadcrumb"><ol>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/translate/">translate</a></li>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/translate/codeforces/">codeforces</a></li>
</ol></nav></div>
<div class>
<div id="wiki-body" class="gollum-markdown-content overflow-hidden ">
<div class="markdown-body ">
<p><strong>Nguồn bài</strong>: <a href="http://codeforces.com/blog/entry/3107">Codeforces</a></p>
<p></p><div class="toc"><div class="toc-title">Table of Contents</div><ul><li><a href="#bài-toán">Bài toán</a></li><li><a href="#thuật-toán">Thuật toán</a></li><li><a href="#độ-phức-tạp">Độ phức tạp:</a></li><li><a href="#cài-đặt">Cài đặt:</a></li><li><a href="#áp-dụng">Áp dụng</a></li></ul></div>
<p>Trước khi đọc bài này, các bạn có thể đọc bài <a class="internal absent" href="https://vnoi.info/wiki/algo/string/basic">Xử lý xâu</a> để nắm được các thuật ngữ cơ bản.</p>
<p><strong>Z Algorithm</strong> hay còn gọi là <strong>Z Function</strong> là thuật toán áp dụng cho các bài so khớp chuỗi.</p>
<h1 class="editable"><a class="anchor" id="bài-toán" href="#bài-toán"></a>Bài toán</h1>
<p>Cho một chuỗi $S$ có độ dài $n$, thuật toán Z Function tạo ra một mảng $Z$ mà tại mỗi vị trí $i$, ta có $Z_i$ là độ dài chuỗi con dài nhất là tiền tố của $S$ bắt đầu tại vị trí $S_i$, hay nói một cách khác $Z_i$ là một số nguyên $k$ lớn nhất mà $S_j=S_{i + j}$ với mọi $0 \le j &lt; k$. Trường hợp $S_i \ne S_0$ thì $Z_i = 0$.</p>
<h1 class="editable"><a class="anchor" id="thuật-toán" href="#thuật-toán"></a>Thuật toán</h1>
<p>Ta duyệt qua tất cả các ký tự của $S$ (chỉ số $i$ từ 1 đến $n - 1$). Trong quá trình duyệt, ta duy trì một đoạn $[L, R]$ với $R$ là một số lớn nhất thỏa $1 \le L \le i \le R$ và $[L, R]$ là một tiền tố của $S$ (Nếu không xuất hiện các đoạn như vậy thì đặt $L = R = -1$).</p>
<p>Với $i = 1$ ta có thể dễ dàng tính $L$ và $R$ bằng phép so sánh $S[0..]$ với $S[1..]$. Đồng thời, ta có thể tính giá trị $Z_1$.</p>
<p>Giả sử ta đã xây dựng được đoạn $[L, R]$ và các giá trị $Z[1..i - 1]$, ta sẽ tính $Z_i$ và cập nhật đoạn $[L,R]$ mới như sau:</p>
<ul>
<li>
<p>Nếu $i &gt; R$, khi đấy không tồn tại một chuỗi con là tiền tố của $S$ bắt đầu tại một vị trí trước $i$ và kết thúc tại ví trí $i$ hoặc sau $i$. Bởi nếu như có một tiền tố như vậy, thì đoạn $[L, i]$ sẽ là chuỗi tiền tố tối ưu chứ không phải $[L, R]$. Do đó, ta sẽ cập nhật lại đoạn $[L, R]$ bằng cách so sánh $S[0..]$ với $S[i..]$ và lấy giá trị $Z_i$ hiện tại ($Z_i = R - L + 1$).</p>
</li>
<li>
<p>Ngược lại, $i \le R$ thì đoạn $[L, R]$ hiện tại kéo dài ít nhất đến $i$. Đặt $k = i - L$. Ta biết rằng $Z_i \ge min(Z_k, R - i + 1)$ bởi vì $S[i..]$ bằng với $S[k..]$ ít nhất là $R - i + 1$ ký tự. Xét các trường hợp sau:</p>
<ul>
<li>Nếu $Z_k &lt; R - i + 1$ thì sẽ không có chuỗi con nào là tiền tố của $S$ dài hơn $Z_k$ bắt đầu tại $S_i$. Nghĩa là $Z_i = Z_k$ và đoạn $[L, R]$ vẫn giữ nguyên (do đoạn $[L, R]$ chỉ thay đổi nếu chuỗi tiền tố bắt đầu tại $S_i$ vượt ra khỏi đoạn $[L, R]$).</li>
<li>Nếu $Z_k \ge R - i + 1$ thì chuỗi $S[i..]$ là tiền tố của $S$ và có nhiều hơn $R - i + 1$ ký tự (tức là kết thúc sau vị trí $R$). Như vậy ta cần cập nhật đoạn $[L, R]$ bằng cách đặt lại $L = i$ và so sánh từ vị trí $S[R + 1]$ trở đi để được một vị trí $R$ mới. Đồng thời, ta tính được giá trị của $Z_i$.</li>
</ul>
</li>
</ul>
<h1 class="editable"><a class="anchor" id="độ-phức-tạp" href="#độ-phức-tạp"></a>Độ phức tạp:</h1>
<p>Tại mỗi bước trong vòng lặp, chúng ta không cần so sánh ký tự tại các vị trí nhỏ hơn $R$, và mỗi lần ký tự $R$ phù hợp thì ta tăng $R$ lên một, vì thế ta sẽ tốn nhiều nhất $n$ phép so sánh. Ngoài ra, với mỗi giá trị $i$, ta chỉ tìm thấy một ký tự không phù hợp (điều kiện tăng $R$). Vì thế không thể có nhiều hơn $n$ phép so sánh cho kết quả sai. Đưa đến độ phức tạp thuật toán là $O(n)$.</p>
<h1 class="editable"><a class="anchor" id="cài-đặt" href="#cài-đặt"></a>Cài đặt:</h1>
<p>Có thể dễ dàng cài đặt. Chú ý việc tối ưu hóa $L = R = i$ được sử dụng khi $S_0 \ne S_i$ (Điều đó không làm ảnh hưởng đến thuật toán kể từ giá trị kế tiếp $i &gt; R$ không phân biệt).</p>
<pre class="highlight"><code><span class="kt">int</span> <span class="n">L</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">R</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">Z</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">R</span><span class="p">)</span>
   <span class="p">{</span>
      <span class="n">L</span> <span class="o">=</span> <span class="n">R</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">R</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">S</span><span class="p">[</span><span class="n">R</span><span class="p">]</span> <span class="o">==</span> <span class="n">S</span><span class="p">[</span><span class="n">R</span> <span class="o">-</span> <span class="n">L</span><span class="p">])</span> <span class="n">R</span><span class="o">++</span><span class="p">;</span>
      <span class="n">Z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span> <span class="o">-</span> <span class="n">L</span><span class="p">;</span> <span class="n">R</span><span class="o">--</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">else</span>
   <span class="p">{</span>
      <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">L</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">Z</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="n">Z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">Z</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
      <span class="k">else</span>
      <span class="p">{</span>
          <span class="n">L</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
          <span class="k">while</span> <span class="p">(</span><span class="n">R</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">S</span><span class="p">[</span><span class="n">R</span><span class="p">]</span> <span class="o">==</span> <span class="n">S</span><span class="p">[</span><span class="n">R</span> <span class="o">-</span> <span class="n">L</span><span class="p">])</span> <span class="n">R</span><span class="o">++</span><span class="p">;</span>
          <span class="n">Z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span> <span class="o">-</span> <span class="n">L</span><span class="p">;</span> <span class="n">R</span><span class="o">--</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span></code></pre>
<h1 class="editable"><a class="anchor" id="áp-dụng" href="#áp-dụng"></a>Áp dụng</h1>
<p><a href="https://oj.vnoi.info/problem/substr/">VNOJ - SUBSTR</a></p>
<p>Có thể dùng ZFuntion để giải bài này. Ta tạo ra một chuỗi $S=B+A$, sao đó xây dựng mảng $Z$. Những vị trí có $Z_i \ge Length(B)$ (Với $Length(B) \le i &lt; Length(A)+Length(B)$) là vị trí tương ứng của $B$ trong $A$.</p>
</div>
</div>
</div>
</div>
