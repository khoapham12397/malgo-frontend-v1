<div id="wiki-content">
<h1 class="pt-4">FFT</h1>
<div class="breadcrumb"><nav aria-label="Breadcrumb"><ol>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/">algo</a></li>
<li class="breadcrumb-item"><a href="https://vnoi.info/wiki/gollum/overview/algo/trick/">trick</a></li>
</ol></nav></div>
<div class>
<div id="wiki-body" class="gollum-markdown-content overflow-hidden ">
<div class="markdown-body ">
<p></p><div class="toc"><div class="toc-title">Table of Contents</div><ul><li><a href="#vài-nét-lịch-sử">Vài nét lịch sử</a></li><li><a href="#phép-nhân-hai-đa-thức">Phép nhân hai đa thức</a></li><li><a href="#biểu-diễn-đa-thức-qua-ma-trận-vandermonde">Biểu diễn đa thức qua ma trận Vandermonde</a></li><li><a href="#nghiệm-nguyên-thủy">Nghiệm nguyên thủy</a><ul><li><a href="#một-số-tính-chất-đặc-biệt-của-ma-trận-vandermonde-nghiệm-nguyên-thủy">Một số tính chất đặc biệt của ma trận Vandermonde nghiệm nguyên thủy</a></li></ul></li><li><a href="#phép-biến-đổi-fourier-nhanh">Phép biến đổi Fourier nhanh</a><ul><li><a href="#thuật-toán-nhân-hai-đa-thức">Thuật toán nhân hai đa thức</a></li></ul></li><li><a href="#lưu-ý-về-kỹ-thuật-cài-đặt">Lưu ý về kỹ thuật cài đặt</a><ul><li><a href="#khai-báo">Khai báo</a></li><li><a href="#chuẩn-hóa-bậc-đa-thức">Chuẩn hóa bậc đa thức</a></li><li><a href="#đệ-quy-và-khử-đệ-quy">Đệ quy và Khử đệ quy</a></li></ul></li><li><a href="#bài-tập-luyện-tập">Bài tập luyện tập</a></li><li><a href="#tài-liệu-tham-khảo">Tài liệu tham khảo</a></li></ul></div>
<p>Tác giả: ngmq</p>
<p>Trong bài này chúng ta sẽ tìm hiểu về thuật toán nhân nhanh hai đa thức sử dụng phép biến đổi Fourier nhanh (<em>Fast Fourier Transform - FFT</em>) và cách cài đặt của nó. Bài viết này sẽ chỉ nêu chứng minh sơ lược của một vài tính chất được sử dụng. Các chứng minh chi tiết có thể tìm thấy ở mục tài liệu tham khảo phía cuối của bài viết.</p>
<h1 class="editable"><a class="anchor" id="vài-nét-lịch-sử" href="#vài-nét-lịch-sử"></a>Vài nét lịch sử</h1>
<p>Phép biến đổi Fourier (<em>Fourier Transform</em>) là một trong số những phát kiến toán học đặc sắc có lịch sử hào hùng, gắn liền với những phát kiến khoa học và chiến tranh quân sự ở thế kỷ 19 và 20. <strong>Joseph Fourier</strong> (1768-1830) là một nhà khoa học làm việc trong đội quân thám hiểm Ai Cập của Napoleon từ năm 1798. Sau khi cách mạng Pháp kết thúc năm 1799, Fourier trở về Pháp và tham gia xây dựng lại đất nước trong vai trò một giáo sư của đại học École Polytechnique. Trong quá trình làm việc với các công trình xây dựng cầu đường và đóng tàu, ông đặc biệt quan tâm tới bài toán mô tả quá trình truyền dẫn nhiệt trong kim loại, điều dẫn tới sự ra đời của phép biến đổi Fourier liên tục vào năm 1807 trong một báo cáo của ông tại viện hoàng gia Paris. Trong đó, ông mô tả mọi hàm số, kể cả các hàm số không liên tục đều có thể được biểu diễn dưới dạng tổng của một số vô hạn các hàm số lượng giác. Phát biểu này của Fourier gây chấn động và ấn tượng tới mức nhà toán học Pháp cùng thời là <strong>Lagrange</strong> cho rằng việc nghĩ ra phát kiến này là <em>gần như không thể</em> ("nothing short of impossible") [1]. Trong hơn một trăm năm sau đó phép biến đổi Fourier trở thành một đối tượng nghiên cứu phổ biến và liên tục được phát triển, hoàn thiện bởi vô số các tên tuổi lớn của toán lý thuyết [2].</p>
<p>Trong khi phiên bản nguyên thủy có lịch sử hoành tráng như vậy, phép biến đổi Fourier nhanh, dù được cho là ra đời trước, lại được quan tâm chậm hơn nhiều. Người ta cho rằng những ý tưởng đầu tiên về biến đổi Fourier nhanh được phát triển bởi nhà toán học Đức <strong>Carl Friedrich Gauss</strong> (1777 - 1855) vào năm 1805 khi ông cố gắng xác định quỹ đạo của các thiên thạch [3], nhưng khi đó ông không công bố kết quả của mình. Mối liên hệ giữa Gauss và phép biến đổi Fourier nhanh chỉ được phát hiện khi các công trình của ông được tập hợp và công bố vào năm 1866. Mặc dù vậy, vào thời đó không có ai quan tâm tới công trình này vì lý thuyết độ phức tạp tính toán chưa phát triển (mãi tới năm 1936 <strong>Alan Turing</strong> mới phát triển mô hình tính toán đầu tiên, và phải tới năm 1965 thì lịch sử ngành nghiên cứu về độ phức tạp tính toán mới bắt đầu với công trình của <strong>Hartmanis</strong> và <strong>Stearns</strong> [4]). Cũng trong năm 1965 hai nhà toán học trong ban cố vấn khoa học của tổng thống Mỹ Kennedy là <strong>James Cooley</strong> và <strong>John Tukey</strong> đã tự tìm ra phép biến đổi nhanh Fourier trong khi thiết kế hệ thống phát hiện các vụ thử hạt nhân của chính quyền Xô Viết [3]. Kể từ thời điểm đó phép biến đổi nhanh Fourier mới chính thức được quan tâm và nghiên cứu ứng dụng trong rất nhiều các lĩnh vực nghiên cứu khác nhau của vật lý, sinh học, điện tử, y tế, điều khiển học…</p>
<p>Nghiên cứu chỉ ra rằng mắt và tai người, động vật có "cài đặt" sẵn thuật toán biến đổi Fourier để giúp chúng ta nhìn và nghe, vì vậy nó được GS <strong>Ronald Coifman</strong> của đại học Yale gọi là <em>Phương pháp phân tích dữ liệu của tự nhiên</em> ("Nature's way of analyzing data") [1].</p>
<h1 class="editable"><a class="anchor" id="phép-nhân-hai-đa-thức" href="#phép-nhân-hai-đa-thức"></a>Phép nhân hai đa thức</h1>
<p>Cho hai đa thức $p(x), q(x)$ có bậc $d, e$ như sau:</p>
<p><span class="kdmath">$p(x) = a_0 + a_1 x + a_2 x^2 + ... + a_d x^d$</span>
<span class="kdmath">$q(x) = b_0 + b_1 x + b_2 x^2 + ... + b_e x^e$</span></p>
<p>Ta cần tìm tích $c(x)$ của hai đa thức trên, có dạng:
<span class="kdmath">$c(x) = p(x)q(x) = c_0 + c_1 x + c_x x^2 + ... + c_{d+e} x^{d+e}$</span></p>
<p>trong đó</p>
<div class="kdmath">$$
c_{j} = \sum_{i=0}^j a_ib_{j-i} \qquad j = 0, 1, ..., d+e
$$</div>
<p>Cách làm theo định nghĩa là ta nhân mỗi hệ số của $p(x)$ với tất cả các hệ số của $q(x)$ rồi cộng các hệ số của cùng tổng số mũ. Vì hai đa thức có $d+1$ và $e+1$ hệ số nên cách làm này có độ phức tạp là $O((d+1)(e+1)) = O(de)$. Khi $d$ và $e$ tương đối lớn cỡ $10^3$ hoặc $10^4$ trở lên thì độ phức tạp này là quá lớn để chạy trên máy tính, đặc biệt là các máy tính nhúng đòi hỏi tốc độ tính toán nhanh. Phép biến đổi FFT giúp thực hiện phép nhân nói trên trong độ phức tạp $O(N*logN)$ trong đó $N$ là lũy thừa của $2$ nhỏ nhất lớn hơn $d$ và $e$.</p>
<h1 class="editable"><a class="anchor" id="biểu-diễn-đa-thức-qua-ma-trận-vandermonde" href="#biểu-diễn-đa-thức-qua-ma-trận-vandermonde"></a>Biểu diễn đa thức qua ma trận Vandermonde</h1>
<p><em>Kể từ phần này trở về sau, ta quy ước $n$ là số hệ số của đa thức (bậc $n-1$) và $n$ là một lũy thừa của 2 ($n = 2, 4, 8, 16, 32, 64…$).</em></p>
<p>Xét đa thức $p(x) = a_0 + a_1 x + a_2 x^2 + … + a_{n-1} x^{n-1}$ với bậc $n-1$ và các hệ số phức $a_i \in \mathbb{C}$. Biểu thức tính $n$ giá trị của $p(x)$ tại $n$ điểm $z_0, z_1, … z_{n-1}$ có thể biểu diễn qua phép nhân ma trận như sau:</p>
<div class="kdmath">$$
\begin{bmatrix}
1 &amp; z_0^1 &amp; z_0^2 &amp; \dots &amp; z_0^{n-1} \newline
1 &amp; z_1 &amp; z_1^2 &amp; \dots &amp; z_1^{n-1} \newline
\ldots &amp; \ldots &amp; \ldots &amp; \ldots &amp; \ldots\newline
1 &amp; z_{n-1}^1 &amp; z_{n-1}^2 &amp; \dots &amp; z_{n-1}^{n-1}
\end{bmatrix}
\begin{bmatrix}
a_0 \newline a_1 \newline \vdots \newline a_{n-1}
\end{bmatrix}
$$</div>
<p>$=$</p>
<div class="kdmath">$$
\begin{bmatrix}
p(z_0) \newline p(z_1) \newline \vdots \newline p(z_{n-1})
\end{bmatrix} \space (1)
$$</div>
<p>Ma trận vuông $V$ kích cỡ $n*n$ của $z_{0:{n-1}}$ ở trên được gọi là ma trận Vandermonde.
Ta có các định lý sau:</p>
<p><strong>Định lý 1:</strong> Định thức của ma trận Vandermonde là
<span class="kdmath">$det(V) = \prod_{0 \leq i &lt; j \leq n-1}(z_j - z_i)$</span></p>
<p><strong>Chứng minh (sơ lược):</strong>
Với mỗi hàng $i = 0, 1, …n-2$ của định thức ta liên tục thay hàng $j = i+1, i+2, …n-1$ bằng hiệu của các hệ số của hàng $j$ trừ đi hàng $i$. Đây là phép biến đổi cơ bản (<em>elementary operation</em>) nên giá trị định thức cần tính không đổi. Lấy nhân tử chung $z_j - z_i$ ở tất cả các hàng ra ngoài và xét tiếp hàng $i+1$. Sau khi xét xong $i = n-2$ ta được một ma trận chéo có đường chéo chỉ gồm $z_{ii} = 1$, định thức của ma trận này hiển nhiên bằng 1. Vì vậy định thức cần tính là tích của tất cả các nhân tử chung bỏ ra ngoài ở các bước trước đó.</p>
<p>Phép chứng minh bằng quy nạp có thể xem thêm tại <a href="https://proofwiki.org/wiki/Vandermonde_Determinant">đây</a></p>
<p><strong>Định lý 2:</strong> Đa thức $p(x)$ được xác định duy nhất bởi các giá trị của nó $p(z_0), p(z_1), … p(z_{n-1})$ khi $n$ giá trị $z_0, z_1, … z_{n-1}$ phân biệt. Ta gọi đây là <em>phép biến đổi ngược</em>.</p>
<p><strong>Chứng minh:</strong></p>
<p>Coi phương trình $(1)$ là một hệ phương trình $n$ ẩn với bộ nghiệm $a_0, a_1, …a_{n-1}$. Để đa thức $p(x)$ xác định và duy nhất thì định thức của ma trận $V$ ở trên phải khác $0$. Theo <strong>Định lý 1</strong> ta có điều phải chứng minh.</p>
<p><strong>Hệ quả:</strong> khi $V$ khả nghịch, hệ số $a_0, a_1, …a_{n-1}$ được xác định thông qua tích của ma trận nghịch đảo $V^{-1}$ của $V$ và $p(z_0), p(z_1), …p(z_{n-1})$.</p>
<p>Từ định lý 2, ta thấy rằng 1 đa thức bất kỳ có 2 cách biểu diễn:</p>
<ol>
<li>Dùng $n$ hệ số $a_i$</li>
<li>Dùng $n$ cặp giá trị $z_i, p(z_i)$.</li>
</ol>
<p>Đây chính là nền tảng của việc tính nhanh tích của 2 đa thức sử dụng FFT:</p>
<ol>
<li>Chọn 1 dãy $z_i$ gồm $N$ phần tử. $z_i$ có thể chọn tuỳ ý miễn sao giá trị của chúng là đôi một khác nhau để các đa thức $p(x)$, $q(x)$ và $c(x)$ là xác định và duy nhất.</li>
<li>Chuyển 2 đa thức $p(x)$ và $q(x)$ sang cách biểu diễn 2. (dùng FFT)</li>
<li>Tính tích của 2 đa thức trong cách biểu diễn 2 trong $O(N)$. Điều này cực kỳ đơn giản, vì khi ta đã cố định dãy $z_i$, ta có thể tính tất cả $c(z_i) = p(z_i) q(z_i)$ trong $O(N)$.</li>
<li>Chuyển đa thức $c(x)$ về cách biểu diễn 1 (dùng FFT).</li>
</ol>
<h1 class="editable"><a class="anchor" id="nghiệm-nguyên-thủy" href="#nghiệm-nguyên-thủy"></a>Nghiệm nguyên thủy</h1>
<p>Như đã phân tích ở trên, ta cần chọn dãy $z_i$ sao cho việc biến đổi đa thức giữa 2 cách biểu diễn có thể thực hiện một cách hiệu quả. Nếu ta chọn $z_i$ là các <strong>nghiệm nguyên thủy</strong> thoả mãn:</p>
<div class="kdmath">$$
z^n = 1 \qquad z \in \mathbb{C} \qquad (2)
$$</div>
<p>với $n$ như đã quy ước và cũng là số nghiệm của phương trình $(2)$ mà ta cần. Công thức Euler xác định nghiệm thứ $k$ của phương trình $(2)$ là</p>
<div class="kdmath">$$
z_k = w_n^k = (e^{ {2\pi i}\over n})^k = e^{ {2\pi i}k\over n} = cos{{2\pi k}\over n} + isin{{2\pi k}\over n} \qquad k = 0, 1, ... n - 1
$$</div>
<p>trong đó $w_n$ là nghiệm mũ 1:</p>
<div class="kdmath">$$
w_n = e^{ {2\pi i}\over n} = cos{{2\pi}\over n} + isin{{2\pi}\over n}
$$</div>
<p>Dễ thấy là nghiệm nguyên thủy thứ $k$ có thể được tính trong $O(1)$ với $n$ đã biết.</p>
<h2 class="editable"><a class="anchor" id="một-số-tính-chất-đặc-biệt-của-ma-trận-vandermonde-nghiệm-nguyên-thủy" href="#một-số-tính-chất-đặc-biệt-của-ma-trận-vandermonde-nghiệm-nguyên-thủy"></a>Một số tính chất đặc biệt của ma trận Vandermonde nghiệm nguyên thủy</h2>
<p><strong>Tính chất 1:</strong> Ma trận nghịch đảo $V^{-1}$ được tính theo công thức: $V^{-1}[i,j] = {V[i,j]^{-1} \over n}$ với $i, j = 0, 1,…n-1$ là chỉ số hàng và cột của ma trận.</p>
<p><strong>Chứng minh (sơ lược):</strong> gọi $B$ là ma trận kích cỡ $n * n$ tạo bởi</p>
<div class="kdmath">$$
B[i, j] = V[i,j]^{-1} \qquad \forall i, j = 0, 1,...n-1
$$</div>
<p>Ta sẽ chứng minh tích $P = B * V = V * B = n * I$, trong đó $I$ là ma trận đơn vị.</p>
<p>Xét phép nhân hàng $i$ của ma trận $V$ và cột $k$ của ma trận $B$, ta có:
<span class="kdmath">$P[i, k] = \sum_{j=0}^{n-1}w_n^{ij}w_n^{-jk} = \sum_{j=0}^{n-1}w_n^{j(i-k)}$</span></p>
<ul>
<li>Nếu $i = k:$ $P[i, k] = P[i, i] = \sum_{j=0}^{n-1}w_n^0 = n \qquad \forall i = 0, 1, …n-1$.</li>
<li>Nếu $i \neq k:$ $P[i, k] = \sum_{j=0}^{n-1}{w_n^{i-k}}^j = {1 - {w_n^{i-k}}^n \over {1-w_n^{i-k}}} = 0$</li>
</ul>
<p>Vậy $P = nI$ hay là $V * B/n = B/n * V = I$, vậy $B = V^{-1}$.</p>
<p><strong>Hệ quả:</strong> Độ phức tạp tính toán cho $V^{-1}$ bằng với độ phức tạp tính $V$.</p>
<p><strong>Tính chất 2:</strong> Chia ma trận $V$ thành $4$ phần bằng nhau kích cỡ $n/2 * n/2$ theo $2$ tiêu chí: độ lớn của hàng so với $n/2$ và tính chẵn lẻ của các cột.</p>
<ul>
<li>Phần $I$ gồm các phần tử có chỉ số hàng $0, 1,…n/2 - 1$ và chỉ số cột là chẵn $0, 2, 4, …n-2$.</li>
<li>Phần $II$ gồm các phần tử có chỉ số hàng $0, 1,…n/2 - 1$ và chỉ số cột là lẻ $1, 3, 5, …n-1$.</li>
<li>Phần $III$ gồm các phần tử có chỉ số hàng $n/2, n/2+1,…n-1$ và chỉ số cột là chẵn $0, 2, 4, …n-2$.</li>
<li>Phần $IV$ gồm các phần tử có chỉ số hàng $n/2, n/2+1,…n-1$ và chỉ số cột là lẻ $1, 3, 5, …n-1$.</li>
</ul>
<p><img src="https://vnoi.info/wiki/uploads/img4.png" height="250" width="500" />
(<em>Image Courtesy of Aalto University</em>)</p>
<p>Nói cách khác, ta tạo một ma trận mới $K$ bằng cách chuyển tất cả các cột có chỉ số chẵn của ma trận $V$ lên trước, các cột có chỉ số lẻ về sau, giữ nguyên thứ tự tương đối của các cột cùng chỉ số chẵn hoặc cùng chỉ số lẻ. Ở ma trận $K$ này cột $n-2$ của $V$ nằm ngay trước cột $1$ của $V$. Bốn phần $I, II, III, IV$ được tạo bởi cắt đều ma trận $K$ thành 4 phần bằng nhau.</p>
<p>Ký hiệu $K_I, K_{II}, K_{III}, K_{IV}$ là bốn ma trận con của $K$. Tất cả các phần tử trong phần $II, III, IV$ đều có thể tính được từ phần $I$ theo công thức sau:</p>
<p><span class="kdmath">$K_{II}[i, j] = w_n^i K_I[i,j] \qquad \forall i, j = 0, 1, ...n/2 - 1$</span>
<span class="kdmath">$K_{III}[i,j] = K_{I}[i,j] \qquad \forall i, j = 0, 1, ...n/2 - 1$</span>
<span class="kdmath">$K_{IV}[i, j] = -w_n^i K_I[i,j] \qquad \forall i, j = 0, 1, ...n/2 - 1$</span></p>
<p><strong>Chứng minh:</strong> các bạn tự chứng minh hoặc xem slide số 23 trong tài liệu của trường DH Aalto ở phần tài liệu tham khảo.</p>
<p><strong>Tính chất 3:</strong> ma trận nghịch đảo $V^{-1}$ cũng có thể chia thành $4$ phần bằng nhau với các phần $II, III, IV$ tính được qua phần $I$ giống như <strong>Tính chất 2</strong>.</p>
<p><strong>Hệ quả:</strong> Phép biến đổi Fourier ngược (<em>inverse Fourier transform</em>) có cùng độ phức tạp với phép biển đổi Fourier.</p>
<h1 class="editable"><a class="anchor" id="phép-biến-đổi-fourier-nhanh" href="#phép-biến-đổi-fourier-nhanh"></a>Phép biến đổi Fourier nhanh</h1>
<p>Trong phần trên ta đã thấy vai trò của ma trận Vandermonde $V$ là biến đổi một vector cột $a_0, a_1, …a_{n-1}$ thành một vector cột khác cùng kích cỡ $p(z_0), p(z_1), …p(z_{n-1})$. Phép biến đổi này được gọi là "Biến đổi Fourier rời rạc" (<em>Discrete Fourier Transform</em>). Lưu ý là mặc dù hai khái niệm "Biến đổi Fourier rời rạc" (<em>DFT</em>) và "Phép biến đổi Fourier nhanh" (<em>FFT</em>) là khác nhau nhưng vì khi cài đặt DFT người ta luôn sử dụng FFT nên hai khái niệm này được coi như đồng nhất.</p>
<p><strong>Định lý 3:</strong> Tồn tại thuật toán biến đổi Fourier rời rạc có độ phức tạp là $O(nlog_2n)$.</p>
<p><strong>Chứng minh:</strong> Sử dụng lại ký hiệu trong hình vẽ ở phần trên, ta gọi $X$ là vector cần biến đổi Fourier và $Y$ là vector kết quả tương ứng. Thay vì sử dụng ma trận $V$ để nhân với $X$, ta sử dụng ma trận $K$ là kết quả của phép biến đổi như trong <strong>Định lý 2</strong> để nhân với $X$. Lưu ý là vì $V$ đã đổi thứ tự cột nên $X$ cũng phải đổi thứ tự hàng: tất cả các hàng có chỉ số chẵn của $X$ được chuyển lên trên và các hàng chỉ số lẻ chuyển xuống dưới. Hình minh họa với $n = 4$ và $4$ nghiệm để thay vào ma trận Vandermonde là $1, i, -1, -i$:</p>
<p><img src="https://vnoi.info/wiki/uploads/img5.png" height="250" width="400" />
(<em>Image Courtesy: Aalto University</em>)</p>
<p>Tách vector kết quả $Y$ thành hai phần theo $n/2$, ta được:</p>
<p><img src="https://vnoi.info/wiki/uploads/img6.png" height="300" width="500" />
(<em>Image Courtesy: Aalto University</em>)</p>
<p>Ta quan sát là công thức tính nửa trên và nửa dưới của vector cột kết quả $Y$ sử dụng chung hai hạng tử và chỉ khác nhau về dấu của hạng tử thứ hai. Nói cách khác, chỉ cần tính được hai hạng tử tạo thành kết quả của vector kích cỡ $n/2$ là ta thu được kết quả của cả vector kích cỡ $n$ trong $O(n)$. Theo định lý tổng quát, độ phức tạp của cả quá trình là $O(nlog_2n)$</p>
<p><strong>Công thức truy hồi:</strong>
Từ tính chất đặc biệt của ma trận $K$, ta có công thức truy hồi để biến đổi một vector cột $X$ thành vector cột $Y$ như sau:</p>
<p><span class="kdmath">$FFT(x_{i=0, 1, 2,...n/2 - 1}) = FFT(x_{i=0, 2, 4, ...x_{n-2}}) + w_n^i FFT(x_{i=1, 3, 5...n-1})$</span>
<span class="kdmath">$FFT(x_{i=n/2, n/2+1, n/2+2,...n-1}) = FFT(x_{i=0, 2, 4, ...x_{n-2}}) - w_n^i FFT(x_{i=1, 3, 5...n-1})$</span></p>
<h2 class="editable"><a class="anchor" id="thuật-toán-nhân-hai-đa-thức" href="#thuật-toán-nhân-hai-đa-thức"></a>Thuật toán nhân hai đa thức</h2>
<p>Đến đây ta đã có thể hoàn thiện chương trình nhân 2 đa thức $p(x), q(x)$ và lưu kết quả thành $h(x)$:
</p><pre class="highlight"><code>function NhânĐaThức( p(x), q(x), n )

// Lưu ý: n là số hệ số của đa thức kết quả
// Nếu p(x) có bậc d và q(x) có bậc e thì n = d + e + 1

fp[] = FFT(p(x), n) // biến đổi Fourier cho p(x) và lưu các giá trị vào mảng fp
fq[] = FFT(q(x), n) // biến đổi Fourier cho q(x) và lưu các giá trị vào mảng fq

for(i = 0; i &lt; n; ++i)
   fh[i] = fp[i] * fq[i]; // nhân tương ứng các giá trị của fp và fq, lưu vào mảng fh

h(x) = FFT_ngược(fh) // biến đổi Fourier ngược và lưu vào kết quả

end function</code></pre>
<h1 class="editable"><a class="anchor" id="lưu-ý-về-kỹ-thuật-cài-đặt" href="#lưu-ý-về-kỹ-thuật-cài-đặt"></a>Lưu ý về kỹ thuật cài đặt</h1>
<p>Vì FFT đòi hỏi phải sử dụng số phức và (trong nhiều trường hợp) khử đệ quy nên có thể gây khó khăn cho các bạn chưa quen, phần này sẽ hướng dẫn sơ lược về cách cài đặt sử dụng <code>C++</code>.</p>
<h2 class="editable"><a class="anchor" id="khai-báo" href="#khai-báo"></a>Khai báo</h2>
<p>Để sử dụng số phức trong <code>C++</code> ta cần khai báo thư viện <code>complex</code>:</p>
<p></p><pre class="highlight"><code><span class="cp">#include &lt;complex&gt;</span></code></pre>
Vì <code>C++</code> cài đặt <code>complex</code> là một lớp (<code>class</code>) gồm 2 trường thực (<code>real()</code>) và ảo (<code>imag()</code>) nên khi sử dụng ta cần chỉ định kiểu dữ liệu cho hai trường này. Hai kiểu dữ liệu thông dụng là <code>double</code> hoặc <code>long double</code>:
<pre class="highlight"><code><span class="k">typedef</span> <span class="n">complex</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">base</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">base</span><span class="o">&gt;</span> <span class="n">vb</span><span class="p">;</span></code></pre>
<p>Sau khi được định nghĩa bằng lệnh <code>typedef</code> thì để khai báo biến và vector kiểu phức, ta chỉ cần viết <code>base x</code> và <code>vb v</code> là được.</p>
<p>Một số phiên bản cài đặt tự định nghĩa lớp số ảo bằng một <code>struct</code> hoặc <code>class</code>. Nếu lớp tự viết này không có chức năng đặc biệt nào thì việc này là không cần thiết vì bản thân <code>&lt;complex&gt;</code> đã là một lớp rồi. Bạn có thể xem qua file thư viện trong thư mục cài đặt trình biên dịch, ví dụ với CodeBlocks thì đường dẫn có dạng <code>CodeBlocks\MinGW\lib\gcc\mingw32\4.7.1\include\c++\complex</code> (file ko có phần mở rộng).</p>
<h2 class="editable"><a class="anchor" id="chuẩn-hóa-bậc-đa-thức" href="#chuẩn-hóa-bậc-đa-thức"></a>Chuẩn hóa bậc đa thức</h2>
<p>Trong các phần trên ta đã giả sử rằng $n$ là lũy thừa của $2$. Để đảm bảo tính đối xứng và thuận tiện khi cài đặt, nếu đề bài không cho trước $n$ bậc của đa thức là lũy thừa của $2$ thì ta cần chuẩn hóa thành số lũy thừa nhỏ nhất mà lớn hơn $n$. Chẳng hạn với $n = 10^5$ thì giá trị chuẩn hóa là $2^{17} = 131072$ vì $2^{16} = 65536 &lt; 10^5$. Các hệ số của bậc cao hơn giá trị $n$ ban đầu gán bằng $0$.</p>
<h2 class="editable"><a class="anchor" id="đệ-quy-và-khử-đệ-quy" href="#đệ-quy-và-khử-đệ-quy"></a>Đệ quy và Khử đệ quy</h2>
<p><strong>Đệ quy:</strong></p>
<p>Xét một đoạn mã <code>C++</code> cài đặt hàm FFT sử dụng đệ quy như sau:</p>
<pre class="highlight"><code><span class="kt">void</span> <span class="nf">fft_slow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vb</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span> <span class="c1">// biến đổi fft của vector a, lưu kết quả vào chính nó</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>

    <span class="c1">// Bước 1. Khai báo kết quả fft chẵn và lẻ</span>
    <span class="n">vb</span> <span class="n">a_even</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span> <span class="n">a_odd</span> <span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>

    <span class="c1">// Bước 2. Tách hàng chẵn và hàng lẻ</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">a_even</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">a_odd</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>  <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
        <span class="o">++</span><span class="n">j</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Bước 3. Biến đổi FFT với các hàng chẵn, lẻ</span>
    <span class="n">fft_slow</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">a_even</span><span class="p">);</span>
    <span class="n">fft_slow</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">a_odd</span><span class="p">);</span>

   <span class="c1">// Bước 4: Ghép hoàn chỉnh kết quả</span>
    <span class="kt">double</span> <span class="n">ang</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
    <span class="n">base</span> <span class="n">w</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>  <span class="n">wn</span> <span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">ang</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">ang</span><span class="p">));</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>         <span class="o">=</span> <span class="n">a_even</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="n">a_odd</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_even</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">w</span> <span class="o">*</span> <span class="n">a_odd</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">w</span> <span class="o">*=</span> <span class="n">wn</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
<p>Có nhiều nguyên nhân làm cho FFT đệ quy chạy chậm, như trong <strong>Bước 1</strong> thì khai báo hai vector kích cỡ $n/2$ lớn như vậy và lại khai báo liên tục ở các mức đệ quy. Bản thân chương trình đệ quy cũng chạy chậm vì chương trình phải lưu rất nhiều con trỏ stack và liên tục giải phóng bộ nhớ của biến cục bộ ở mỗi mức đệ quy. Nhìn chung đệ quy chỉ có ý nghĩa như trong thuật toán Quy Hoạch Động khi ta muốn tìm kết quả của một công thức truy hồi mà chỉ duyệt qua những trạng thái liên quan trực tiếp tới kết quả. Trong FFT ta luôn phải thăm hết các ma trận con nên cài đặt FFT bằng đệ quy không có lợi về tốc độ thực hiện.</p>
<p>Để cho đầy đủ thì ta cũng có hàm biến đổi FFT ngược như sau:</p>
<pre class="highlight"><code><span class="kt">void</span> <span class="nf">inverse_fft_slow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vb</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
    <span class="n">vb</span> <span class="n">a_even</span><span class="p">,</span> <span class="n">a_odd</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">a_odd</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="k">else</span>      <span class="n">a_even</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">inverse_fft_slow</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">a_even</span><span class="p">);</span>
    <span class="n">inverse_fft_slow</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">a_odd</span><span class="p">);</span>

    <span class="kt">double</span> <span class="n">ang</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
    <span class="n">base</span> <span class="n">w</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>  <span class="n">wn</span> <span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">ang</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">ang</span><span class="p">));</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>         <span class="o">=</span> <span class="n">a_even</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="n">a_odd</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>         <span class="o">/=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_even</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">w</span> <span class="o">*</span> <span class="n">a_odd</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">/=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="n">w</span> <span class="o">*=</span> <span class="n">wn</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
<p><strong>Khử đệ quy:</strong></p>
<p>Để khử đệ quy thì ta cần phân tích mối liên hệ giữa các lời gọi đệ quy và xem các phần tử được tính theo thứ tự nào. Hình vẽ sau đây minh họa trường hợp $n = 8$:</p>
<p><img src="https://vnoi.info/wiki/uploads/fft_tree.png" alt="RecursionTree" /></p>
<p>Màu đỏ là các nhóm chẵn và màu xanh là các nhóm lẻ. Các bạn hãy dựa vào tính chẵn lẻ và để ý các số nhị phân $0, 1$ trong hình vẽ để tự viết chương trình FFT khử đệ quy hoặc giải thích tính đúng đắn của đoạn mã sau (đây là hàm FFT đã được dùng để giải bài POST2)</p>
<pre class="highlight"><code><span class="cp">#define PI acos(-1)
</span><span class="k">const</span> <span class="kt">int</span> <span class="n">NBIT</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">18</span><span class="p">;</span> <span class="c1">// chuẩn hóa bậc của đa thức là 18</span>
<span class="n">base</span> <span class="n">W</span><span class="p">[</span><span class="n">N</span><span class="p">];</span> <span class="c1">// mảng lưu các nghiệm nguyên thủy</span>

<span class="c1">// Hàm reverse bit: Đảo ngược nbit đầu tiên trong mã nhị phân của số mask</span>
<span class="kt">int</span> <span class="nf">revBit</span><span class="p">(</span><span class="kt">int</span> <span class="n">nbit</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mask</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">nbit</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="o">--</span><span class="n">j</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">mask</span> <span class="o">&gt;&gt;</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="p">(</span><span class="n">mask</span> <span class="o">&gt;&gt;</span> <span class="n">j</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">mask</span> <span class="o">^=</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">;</span>
            <span class="n">mask</span> <span class="o">^=</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">j</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">mask</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Biến đổi FFT của mảng a</span>
<span class="kt">void</span> <span class="nf">fft</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vb</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>

    <span class="c1">// Đi từ dưới lên trên của cây đệ quy: Hàng cuối cùng giá trị bằng với mảng được cho ban đầu nhưng hóa đổi vị trí</span>
    <span class="c1">// theo số có biểu diễn nhị phân ngược với chỉ số</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">revBit</span><span class="p">(</span><span class="n">NBIT</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">vb</span> <span class="n">anext</span><span class="p">(</span><span class="n">n</span><span class="p">);</span> <span class="c1">// hàng tiếp theo</span>

    <span class="c1">// chiều cao cây bằng Log(n)</span>
    <span class="c1">// biến "step" lưu số phần tử nằm trong một nhóm chẵn hoặc lẻ</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">step</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">step</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">double</span> <span class="n">ang</span> <span class="o">=</span> <span class="n">PI</span> <span class="o">/</span> <span class="n">step</span> <span class="p">;</span> <span class="c1">//2*PI/(step * 2);</span>
        <span class="n">base</span> <span class="n">w</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>  <span class="n">wn</span> <span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">ang</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">ang</span><span class="p">));</span>

        <span class="c1">// Lưu trước mảng nghiệm nguyên thủy</span>
        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">step</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
            <span class="n">w</span> <span class="o">*=</span> <span class="n">wn</span><span class="p">;</span>
        <span class="p">}</span>

       <span class="c1">// Cứ một nhóm chẵn và một nhóm lẻ cạnh nhau thì tạo thành kết quả cho hàng ở trên</span>
       <span class="c1">// Duyệt qua tất cả các nhóm chẵn và nhóm lẻ cạnh nó</span>
       <span class="c1">// even = chẵn, odd = lẻ</span>
        <span class="kt">int</span> <span class="n">start_even</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">start_odd</span>  <span class="o">=</span> <span class="n">start_even</span> <span class="o">+</span> <span class="n">step</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">start_even</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">step</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">anext</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span>        <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">start_odd</span> <span class="o">+</span> <span class="n">i</span><span class="p">];</span>
                <span class="n">anext</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="n">step</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">start_odd</span> <span class="o">+</span> <span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">start_even</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">*</span><span class="n">step</span><span class="p">;</span>
            <span class="n">start_odd</span>   <span class="o">=</span> <span class="n">start_even</span> <span class="o">+</span> <span class="n">step</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">anext</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
<p>Sau đây là cài đặt cho cả FFT xuôi và ngược. Biến <code>invert = true</code> cho FFT ngược.</p>
<pre class="highlight"><code><span class="kt">void</span> <span class="nf">fft</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vb</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">invert</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">revBit</span><span class="p">(</span><span class="n">NBIT</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">vb</span> <span class="n">anext</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">step</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">step</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">double</span> <span class="n">ang</span> <span class="o">=</span> <span class="n">PI</span> <span class="o">/</span> <span class="n">step</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">invert</span><span class="p">)</span> <span class="n">ang</span> <span class="o">=</span> <span class="o">-</span><span class="n">ang</span><span class="p">;</span>

        <span class="n">base</span> <span class="n">w</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>  <span class="n">wn</span> <span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">ang</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">ang</span><span class="p">));</span>

        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">step</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
            <span class="n">w</span> <span class="o">*=</span> <span class="n">wn</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">int</span> <span class="n">start_even</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">start_odd</span>  <span class="o">=</span> <span class="n">start_even</span> <span class="o">+</span> <span class="n">step</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">start_even</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">step</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">anext</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span>        <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">start_odd</span> <span class="o">+</span> <span class="n">i</span><span class="p">];</span>
                <span class="n">anext</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="n">step</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start_even</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">start_odd</span> <span class="o">+</span> <span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">start_even</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">*</span><span class="n">step</span><span class="p">;</span>
            <span class="n">start_odd</span>   <span class="o">=</span> <span class="n">start_even</span> <span class="o">+</span> <span class="n">step</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">anext</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">invert</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/=</span> <span class="n">n</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>
<p>Một số cách cài đặt khác sử dụng con trỏ cũng làm tăng tốc độ thực thi, có thể xem thêm trong trang của <strong>emaxx</strong> phần tài liệu tham khảo. Cũng trong trang của <strong>emaxx</strong> có thể tìm thấy cách cài đặt gộp hai hàm <code>fft</code> và <code>inverse_fft</code> lại làm một sử dụng một biến bool invert làm cho code ngắn gọn hơn.</p>
<h1 class="editable"><a class="anchor" id="bài-tập-luyện-tập" href="#bài-tập-luyện-tập"></a>Bài tập luyện tập</h1>
<ul>
<li><a href="https://oj.vnoi.info/problem/post2/">VNOJ POST2</a></li>
<li><a href="http://codeforces.com/problemset/tags/fft">FFT problems on Codeforces</a></li>
<li><a href="https://a2oj.com/Category.jsp?ID=42">FFT problems by a2oj.com</a></li>
<li>
<a href="https://community.topcoder.com/stat?c=problem_statement&amp;pm=12910&amp;rd=15836">SumOfArrays - Topcoder SRM 603</a> và <a href="https://apps.topcoder.com/wiki/display/tc/SRM+603">Hướng dẫn giải</a>
</li>
</ul>
<h1 class="editable"><a class="anchor" id="tài-liệu-tham-khảo" href="#tài-liệu-tham-khảo"></a>Tài liệu tham khảo</h1>
<ul>
<li>[1] Rohit Thummalapalli. Fourier Transform: Nature’s Way of Analyzing Data. <em>Yale Scientific</em>, 2010. <a href="http://www.yalescientific.org/2010/12/fourier-transform-natures-way-of-analyzing-data/">Link</a>
</li>
<li>[2] Alejandro Dominguez. Highlights in the History of the Fourier Transform. IEEE Pulse, 2016. <a href="http://pulse.embs.org/january-2016/highlights-in-the-history-of-the-fourier-transform/">Link</a>
</li>
<li>[3] Stefan Woerner. Fast Fourier Transform. <em>Numerical Analysis Seminar</em>, Swiss Federal Institute of Technology Zurich, 2008. <a href="http://www2.math.ethz.ch/education/bachelor/seminars/fs2008/nas/woerner.pdf">Link</a>
</li>
<li>[4] Fortnow and Homer. A Short History of Computational Complexity. <em>Bulletin of the European
Association for Theoretical Computer Science 80</em>, June 2003. <a href="http://people.cs.uchicago.edu/~fortnow/beatcs/column80.pdf">Link</a>
</li>
<li><a href="https://csstudyfun.wordpress.com/2009/01/12/bai-toan-nhan-da-thuc-phep-bien-doi-fourier-nhanh-fast-fourier-transform-fft/">Bài toán nhân đa thức, phép biến đổi Fourier nhanh trên csstudyfun.wordpress.com (có chứng minh các tính chất được đề cập trong bài</a></li>
<li><a href="https://drive.google.com/open?id=0BxCwa-q7x3eWT3ZfakNHMWVveTg">Bài giảng của trường DH Aalto, Phần Lan</a></li>
<li><a href="http://e-maxx.ru/algo/fft_multiply">Code cài đặt của e-maxx</a></li>
<li><a href="http://codeforces.com/blog/entry/43499">"Tutorial on FFT — The tough made simple." trên Codeforces</a></li>
</ul>
</div>
</div>
</div>
</div>
